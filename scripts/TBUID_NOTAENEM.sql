CREATE OR REPLACE PACKAGE BODY DBVESTIB."PC_DISTRIBUICAO" IS
	-- *****************************************************
	-- UNIBH - Centro Universitario de Belo Horizonte
	-- *****************************************************
	-- Responsavel : Erix Henrique Morato
	-- Funcão      : Analista de Sistemas
	-- Empresa     : UNIBH
	-- Criado      : 06/09/2007
	-- Objetivo    : Rotinas para realizar o distribuicao dos candidatos nas salas
	-- *****************************************************

	-- STATUS
	-- C = STATUS COMPLETO
	-- P = STATUS PARCIAL
	-- N = STATUS NAO REALIZADO

	-- METODO QUE RETORNA O STATUS DA DISTRIBUICAO DO CADERNO
	FUNCTION F_STATUS_DISTIB_CADERNO(P_CODCONC DBVESTIB.CADERNO.CODCONC%TYPE,
									 P_CODCAD  DBVESTIB.CADERNO.CODCAD%TYPE) RETURN CHAR IS
		N_CANDIDATOS_CADERNO      NUMBER;
		N_CANDIDATOS_ALOC_CADERNO NUMBER;
	BEGIN
		N_CANDIDATOS_CADERNO      := DBVESTIB.PC_DISTRIBUICAO.F_CAND_TOTAL_CADERNO(P_CODCONC,
																				   P_CODCAD);
		N_CANDIDATOS_ALOC_CADERNO := DBVESTIB.PC_DISTRIBUICAO.F_CAND_ALOC_CADERNO(P_CODCONC,
																				  P_CODCAD);
		-- RETORNANDO O STATUS
		IF N_CANDIDATOS_ALOC_CADERNO = 0 THEN
			RETURN 'N'; -- STATUS NÃO REALIZADO
		ELSIF N_CANDIDATOS_CADERNO = N_CANDIDATOS_ALOC_CADERNO THEN
			RETURN 'C'; -- STATUS COMPLETO
		END IF;
	
		RETURN 'P'; -- STATUS PARCIAL
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 'N'; -- STATUS NÃO REALIZADO
	END;

	-- METODO QUE RETORNA O STATUS DA DISTRIBUICAO DO CURSO
	FUNCTION F_STATUS_DISTIB_CURSO(P_CODCONC DBVESTIB.CADERNO.CODCONC%TYPE,
								   P_CODCAD  DBVESTIB.CADERNO.CODCAD%TYPE,
								   P_CODCUR  DBVESTIB.CURSO.CODCUR%TYPE) RETURN CHAR IS
		N_QUANT_CANDIDATOS_CURSO      NUMBER;
		N_QUANT_CANDIDATOS_ALOC_CURSO NUMBER;
	BEGIN
		N_QUANT_CANDIDATOS_CURSO      := DBVESTIB.PC_DISTRIBUICAO.F_CAND_TOTAL_CURSO(P_CODCONC,
																					 P_CODCAD,
																					 P_CODCUR);
		N_QUANT_CANDIDATOS_ALOC_CURSO := DBVESTIB.PC_DISTRIBUICAO.F_CAND_ALOC_CURSO(P_CODCONC,
																					P_CODCAD,
																					P_CODCUR);
		-- RETORNANDO O STATUS
		IF N_QUANT_CANDIDATOS_ALOC_CURSO = 0 THEN
			RETURN 'N'; -- STATUS NÃO REALIZADO
		ELSIF N_QUANT_CANDIDATOS_CURSO = N_QUANT_CANDIDATOS_ALOC_CURSO THEN
			RETURN 'C'; -- STATUS COMPLETO
		END IF;
	
		RETURN 'P'; -- STATUS PARCIAL
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 'N'; -- STATUS NÃO REALIZADO
	END;

	-- METODO QUE RETORNA O STATUS DA DISTRIBUICAO DA CIDADE/BAIRRO
	FUNCTION F_STATUS_DISTIB_BAIRRO(P_CODCONC    DBVESTIB.CADERNO.CODCONC%TYPE,
									P_CODCAD     DBVESTIB.CADERNO.CODCAD%TYPE,
									P_CODCUR     DBVESTIB.CURSO.CODCUR%TYPE,
									P_NOM_CIDADE DBVESTIB.CANDIDATO.CIDCAN%TYPE,
									P_NOM_BAIRRO DBVESTIB.CANDIDATO.BAICAN%TYPE) RETURN CHAR IS
		N_QUANT_CANDIDATOS_BAIRRO      NUMBER;
		N_QUANT_CANDIDATOS_ALOC_BAIRRO NUMBER;
	BEGIN
		N_QUANT_CANDIDATOS_BAIRRO      := DBVESTIB.PC_DISTRIBUICAO.F_CAND_TOTAL_BAIRRO(P_CODCONC,
																					   P_CODCAD,
																					   P_CODCUR,
																					   P_NOM_CIDADE,
																					   P_NOM_BAIRRO);
		N_QUANT_CANDIDATOS_ALOC_BAIRRO := DBVESTIB.PC_DISTRIBUICAO.F_CAND_ALOC_BAIRRO(P_CODCONC,
																					  P_CODCAD,
																					  P_CODCUR,
																					  P_NOM_CIDADE,
																					  P_NOM_BAIRRO);
		-- RETORNANDO O STATUS
		IF N_QUANT_CANDIDATOS_ALOC_BAIRRO = 0 THEN
			RETURN 'N'; -- STATUS NÃO REALIZADO
		ELSIF N_QUANT_CANDIDATOS_BAIRRO = N_QUANT_CANDIDATOS_ALOC_BAIRRO THEN
			RETURN 'C'; -- STATUS COMPLETO
		END IF;
	
		RETURN 'P'; -- STATUS PARCIAL
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 'N'; -- STATUS NÃO REALIZADO
	END;

	-- METODO QUE RETORNA O STATUS DA DISTRIBUICAO DAS SALAS
	FUNCTION F_STATUS_DISTIB_SALA(P_CODCONC   DBVESTIB.CADERNO.CODCONC%TYPE,
								  P_CODLOC    DBVESTIB.CADERNO.CODCAD%TYPE,
								  P_CODSAL    DBVESTIB.CADERNO.CODCAD%TYPE,
								  P_COD_ETAPA DBVESTIB.ETAPA_CONCURSO.COD_ETAPA%TYPE) RETURN CHAR IS
		N_CAPACIDADE_SALA            NUMBER;
		N_QUANT_CANDIDATOS_ALOC_SALA NUMBER;
	BEGIN
		-- CAPACIDADE DA SALA
		SELECT SAL.CAPSAL
		  INTO N_CAPACIDADE_SALA
		  FROM DBVESTIB.SALA SAL
		 WHERE SAL.CODCONC = P_CODCONC
			   AND SAL.CODLOC = P_CODLOC
			   AND SAL.CODSAL = P_CODSAL;
		-- QUANTIDADE DE CANDIDATOS ALOCADOS NA SALA
		N_QUANT_CANDIDATOS_ALOC_SALA := DBVESTIB.PC_DISTRIBUICAO.F_CAND_ALOC_SALA(P_CODCONC,
																				  P_CODLOC,
																				  P_CODSAL,
																				  P_COD_ETAPA);
	
		-- RETORNANDO O STATUS
		IF N_QUANT_CANDIDATOS_ALOC_SALA = 0 THEN
			RETURN 'N'; -- STATUS NÃO REALIZADO
		ELSIF N_QUANT_CANDIDATOS_ALOC_SALA >= N_CAPACIDADE_SALA THEN
			RETURN 'C'; -- STATUS COMPLETO
		END IF;
	
		RETURN 'P'; -- STATUS PARCIAL
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 'N'; -- STATUS NÃO REALIZADO
	END;

	-- METODO QUE RETORNA O STATUS DA DISTRIBUICAO DO CAMPUS MAIS PROXIMO DA RESIDENCIA
	FUNCTION F_STATUS_DISTIB_CAMPUS(P_CODCONC   DBVESTIB.CADERNO.CODCONC%TYPE,
									P_CODCAD    DBVESTIB.CADERNO.CODCAD%TYPE,
									P_CODCUR    DBVESTIB.CURSO.CODCUR%TYPE,
									P_CODCAMPUS DBVESTIB.CANDIDATO.CODCAMPROXRESIDENCIA%TYPE) RETURN CHAR IS
		N_QUANT_CANDIDATOS_CAMPUS      NUMBER;
		N_QUANT_CANDIDATOS_ALOC_CAMPUS NUMBER;
	BEGIN
	
		N_QUANT_CANDIDATOS_CAMPUS      := DBVESTIB.PC_DISTRIBUICAO.F_CAND_TOTAL_CAMPUS(P_CODCONC,
																					   P_CODCAD,
																					   P_CODCUR,
																					   P_CODCAMPUS);
		N_QUANT_CANDIDATOS_ALOC_CAMPUS := DBVESTIB.PC_DISTRIBUICAO.F_CAND_ALOC_CAMPUS(P_CODCONC,
																					  P_CODCAD,
																					  P_CODCUR,
																					  P_CODCAMPUS);
		-- RETORNANDO O STATUS
		IF N_QUANT_CANDIDATOS_ALOC_CAMPUS = 0 THEN
			RETURN 'N'; -- STATUS NÃO REALIZADO
		ELSIF N_QUANT_CANDIDATOS_CAMPUS = N_QUANT_CANDIDATOS_ALOC_CAMPUS THEN
			RETURN 'C'; -- STATUS COMPLETO
		END IF;
	
		RETURN 'P'; -- STATUS PARCIAL
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 'N'; -- STATUS NÃO REALIZADO
	END;

	-- METODO PARA RETORNAR A QUANTIDADE DE CANDIDATOS ALOCADOS NO CADERNO
	FUNCTION F_CAND_ALOC_CADERNO(P_CODCONC DBVESTIB.CADERNO.CODCONC%TYPE,
								 P_CODCAD  DBVESTIB.CADERNO.CODCAD%TYPE) RETURN NUMBER IS
		N_QUANT_CAND_ALOCADOS NUMBER;
	BEGIN
		SELECT COUNT(*)
		  INTO N_QUANT_CAND_ALOCADOS
		  FROM DBVESTIB.CADERNO                CAD,
			   DBVESTIB.CURSOSCADERNO          CCA,
			   DBVESTIB.RCANDCURTUROPC         RCC,
			   DBVESTIB.DISTRIBUICAO_CANDIDATO DCA
		 WHERE CAD.CODCONC = CCA.CODCONC
			   AND CAD.CODCAD = CCA.CODCAD
			   AND CAD.CODCONC = P_CODCONC
			   AND CAD.CODCAD = P_CODCAD
			   AND CAD.COD_ETAPA = DCA.COD_ETAPA
			   AND RCC.CODCONC = CAD.CODCONC
			   AND RCC.CODCONC = DCA.CODCONC
			   AND RCC.CODCAN = DCA.CODCAN
			   AND RCC.CODCUR = CCA.CODCUR
			   AND RCC.NROOPC = '1';
	
		RETURN N_QUANT_CAND_ALOCADOS;
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 0;
	END;

	-- METODO PARA RETORNAR A QUANTIDADE DE CANDIDATOS ALOCADOS NO CURSO
	FUNCTION F_CAND_ALOC_CURSO(P_CODCONC DBVESTIB.CADERNO.CODCONC%TYPE,
							   P_CODCAD  DBVESTIB.CADERNO.CODCAD%TYPE,
							   P_CODCUR  DBVESTIB.CURSO.CODCUR%TYPE) RETURN NUMBER IS
		N_QUANT_CAND_ALOCADOS NUMBER;
	BEGIN
		SELECT COUNT(*)
		  INTO N_QUANT_CAND_ALOCADOS
		  FROM DBVESTIB.CADERNO                CAD,
			   DBVESTIB.CURSOSCADERNO          CCA,
			   DBVESTIB.RCANDCURTUROPC         RCC,
			   DBVESTIB.DISTRIBUICAO_CANDIDATO DCA
		 WHERE CAD.CODCONC = CCA.CODCONC
			   AND CAD.CODCAD = CCA.CODCAD
			   AND CAD.COD_ETAPA = DCA.COD_ETAPA
			   AND CAD.CODCONC = P_CODCONC
			   AND CAD.CODCAD = P_CODCAD
			   AND CCA.CODCUR = P_CODCUR
			   AND RCC.CODCONC = CAD.CODCONC
			   AND RCC.CODCONC = DCA.CODCONC
			   AND RCC.CODCAN = DCA.CODCAN
			   AND RCC.CODCUR = CCA.CODCUR
			   AND RCC.NROOPC = '1';
	
		RETURN N_QUANT_CAND_ALOCADOS;
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 0;
	END;

	-- METODO PARA RETORNAR A QUANTIDADE DE CANDIDATOS ALOCADOS DA CIDADE/BAIRRO
	FUNCTION F_CAND_ALOC_BAIRRO(P_CODCONC    DBVESTIB.CADERNO.CODCONC%TYPE,
								P_CODCAD     DBVESTIB.CADERNO.CODCAD%TYPE,
								P_CODCUR     DBVESTIB.CURSO.CODCUR%TYPE,
								P_NOM_CIDADE DBVESTIB.CANDIDATO.CIDCAN%TYPE,
								P_NOM_BAIRRO DBVESTIB.CANDIDATO.BAICAN%TYPE) RETURN NUMBER IS
		N_QUANT_CAND_ALOCADOS NUMBER;
	BEGIN
		SELECT COUNT(*)
		  INTO N_QUANT_CAND_ALOCADOS
		  FROM DBVESTIB.CADERNO                CAD,
			   DBVESTIB.CURSOSCADERNO          CCA,
			   DBVESTIB.RCANDCURTUROPC         RCC,
			   DBVESTIB.DISTRIBUICAO_CANDIDATO DCA,
			   DBVESTIB.CANDIDATO              CAN
		 WHERE CAD.CODCONC = CCA.CODCONC
			   AND CAD.CODCAD = CCA.CODCAD
			   AND CAD.COD_ETAPA = DCA.COD_ETAPA
			   AND CAD.CODCONC = P_CODCONC
			   AND CAD.CODCAD = P_CODCAD
			   AND CCA.CODCUR = P_CODCUR
			   AND RCC.CODCONC = CAD.CODCONC
			   AND RCC.CODCONC = DCA.CODCONC
			   AND RCC.CODCAN = DCA.CODCAN
			   AND RCC.CODCUR = CCA.CODCUR
			   AND CAN.CODCONC = DCA.CODCONC
			   AND CAN.CODCAN = DCA.CODCAN
			   AND TRIM(CAN.CIDCAN) = TRIM(P_NOM_CIDADE)
			   AND TRIM(CAN.BAICAN) = TRIM(P_NOM_BAIRRO)
			   AND RCC.NROOPC = '1';
	
		RETURN N_QUANT_CAND_ALOCADOS;
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 0;
	END;

	-- METODO PARA RETORNAR A QUANTIDADE DE CANDIDATOS ALOCADOS NA SALA
	FUNCTION F_CAND_ALOC_SALA(P_CODCONC   DBVESTIB.CADERNO.CODCONC%TYPE,
							  P_CODLOC    DBVESTIB.CADERNO.CODCAD%TYPE,
							  P_CODSAL    DBVESTIB.CADERNO.CODCAD%TYPE,
							  P_COD_ETAPA DBVESTIB.ETAPA_CONCURSO.COD_ETAPA%TYPE) RETURN NUMBER IS
		N_QUANT_CAND_ALOCADOS NUMBER;
	BEGIN
	
		-- QUANTIDADE DE CAANDIDATOS ALOCADOS NA SALA E NA ETAPA
		SELECT COUNT(*)
		  INTO N_QUANT_CAND_ALOCADOS
		  FROM (SELECT DCA.COD_DISTRIBUICAO
				  FROM DBVESTIB.DISTRIBUICAO_CANDIDATO DCA
				 WHERE DCA.CODCONC = P_CODCONC
					   AND DCA.CODLOC = P_CODLOC
					   AND DCA.CODSAL = P_CODSAL
					   AND DCA.COD_ETAPA = P_COD_ETAPA
				UNION
				SELECT DCI.COD_DISTRIBUICAO
				  FROM DBVESTIB.DISTRIBUICAO_INSCRICAO DCI
				 WHERE DCI.CODCONC = P_CODCONC
					   AND DCI.CODLOC = P_CODLOC
					   AND DCI.CODSAL = P_CODSAL
					   AND DCI.COD_ETAPA = P_COD_ETAPA
				
				) TAB;
	
		RETURN N_QUANT_CAND_ALOCADOS;
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 0;
	END;

	-- METODO PARA RETORNAR A QUANTIDADE DE CANDIDATOS ALOCADOS DO CAMPUS
	FUNCTION F_CAND_ALOC_CAMPUS(P_CODCONC   DBVESTIB.CADERNO.CODCONC%TYPE,
								P_CODCAD    DBVESTIB.CADERNO.CODCAD%TYPE,
								P_CODCUR    DBVESTIB.CURSO.CODCUR%TYPE,
								P_CODCAMPUS DBVESTIB.CANDIDATO.CODCAMPROXRESIDENCIA%TYPE) RETURN NUMBER IS
		N_QUANT_CAND_ALOCADOS NUMBER;
	BEGIN
		SELECT COUNT(*)
		  INTO N_QUANT_CAND_ALOCADOS
		  FROM DBVESTIB.CADERNO                CAD,
			   DBVESTIB.CURSOSCADERNO          CCA,
			   DBVESTIB.RCANDCURTUROPC         RCC,
			   DBVESTIB.DISTRIBUICAO_CANDIDATO DCA,
			   DBVESTIB.CANDIDATO              CAN
		 WHERE CAD.CODCONC = CCA.CODCONC
			   AND CAD.CODCAD = CCA.CODCAD
			   AND CAD.COD_ETAPA = DCA.COD_ETAPA
			   AND CAD.CODCONC = P_CODCONC
			   AND CAD.CODCAD = P_CODCAD
			   AND CCA.CODCUR = P_CODCUR
			   AND RCC.CODCONC = CAD.CODCONC
			   AND RCC.CODCONC = DCA.CODCONC
			   AND RCC.CODCAN = DCA.CODCAN
			   AND RCC.CODCUR = CCA.CODCUR
			   AND CAN.CODCONC = DCA.CODCONC
			   AND CAN.CODCAN = DCA.CODCAN
			   AND CAN.CODCAMPROXRESIDENCIA = P_CODCAMPUS
			   AND RCC.NROOPC = '1';
	
		RETURN N_QUANT_CAND_ALOCADOS;
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 0;
	END;

	-- METODO PARA RETORNAR A QUANTIDADE DE CANDIDATOS QUE FALTAM SER ALOCADAS NO CADERNO
	FUNCTION F_CAND_RESTANTE_CADERNO(P_CODCONC DBVESTIB.CADERNO.CODCONC%TYPE,
									 P_CODCAD  DBVESTIB.CADERNO.CODCAD%TYPE) RETURN NUMBER IS
	BEGIN
		RETURN(DBVESTIB.PC_DISTRIBUICAO.F_CAND_TOTAL_CADERNO(P_CODCONC,
															 P_CODCAD) - DBVESTIB.PC_DISTRIBUICAO.F_CAND_ALOC_CADERNO(P_CODCONC,
																													  P_CODCAD));
	END;

	-- METODO PARA RETORNAR A QUANTIDADE DE CANDIDATOS QUE FALTAM SER ALOCADAS NO CURSO
	FUNCTION F_CAND_RESTANTE_CURSO(P_CODCONC DBVESTIB.CADERNO.CODCONC%TYPE,
								   P_CODCAD  DBVESTIB.CADERNO.CODCAD%TYPE,
								   P_CODCUR  DBVESTIB.CURSO.CODCUR%TYPE) RETURN NUMBER IS
	BEGIN
		RETURN(DBVESTIB.PC_DISTRIBUICAO.F_CAND_TOTAL_CURSO(P_CODCONC,
														   P_CODCAD,
														   P_CODCUR) - DBVESTIB.PC_DISTRIBUICAO.F_CAND_ALOC_CURSO(P_CODCONC,
																												  P_CODCAD,
																												  P_CODCUR));
	END;

	-- METODO PARA RETORNAR A QUANTIDADE DE CANDIDATOS QUE FALTAM SER ALOCADAS NO CURSO
	FUNCTION F_CAND_RESTANTE_BAIRRO(P_CODCONC    DBVESTIB.CADERNO.CODCONC%TYPE,
									P_CODCAD     DBVESTIB.CADERNO.CODCAD%TYPE,
									P_CODCUR     DBVESTIB.CURSO.CODCUR%TYPE,
									P_NOM_CIDADE DBVESTIB.CANDIDATO.CIDCAN%TYPE,
									P_NOM_BAIRRO DBVESTIB.CANDIDATO.BAICAN%TYPE) RETURN NUMBER IS
	BEGIN
		RETURN(DBVESTIB.PC_DISTRIBUICAO.F_CAND_TOTAL_BAIRRO(P_CODCONC,
															P_CODCAD,
															P_CODCUR,
															P_NOM_CIDADE,
															P_NOM_BAIRRO) - DBVESTIB.PC_DISTRIBUICAO.F_CAND_ALOC_BAIRRO(P_CODCONC,
																														P_CODCAD,
																														P_CODCUR,
																														P_NOM_CIDADE,
																														P_NOM_BAIRRO));
	END;

	-- METODO PARA RETORNAR A QUANTIDADE DE CANDIDATOS QUE FALTAM SER ALOCADAS NA SALA
	FUNCTION F_CAND_RESTANTE_SALA(P_CODCONC   DBVESTIB.CADERNO.CODCONC%TYPE,
								  P_CODLOC    DBVESTIB.CADERNO.CODCAD%TYPE,
								  P_CODSAL    DBVESTIB.CADERNO.CODCAD%TYPE,
								  P_COD_ETAPA DBVESTIB.ETAPA_CONCURSO.COD_ETAPA%TYPE) RETURN NUMBER IS
		N_CAPACIDADE_SALA NUMBER;
	BEGIN
		-- CAPACIDADE DA SALA
		SELECT SAL.CAPSAL
		  INTO N_CAPACIDADE_SALA
		  FROM DBVESTIB.SALA SAL
		 WHERE SAL.CODCONC = P_CODCONC
			   AND SAL.CODLOC = P_CODLOC
			   AND SAL.CODSAL = P_CODSAL;
	
		RETURN(N_CAPACIDADE_SALA - DBVESTIB.PC_DISTRIBUICAO.F_CAND_ALOC_SALA(P_CODCONC,
																			 P_CODLOC,
																			 P_CODSAL,
																			 P_COD_ETAPA));
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 0;
	END;

	-- METODO PARA RETORNAR A QUANTIDADE DE CANDIDATOS QUE FALTAM SER ALOCADAS NO CURSO POR CAMPUS
	FUNCTION F_CAND_RESTANTE_CAMPUS(P_CODCONC   DBVESTIB.CADERNO.CODCONC%TYPE,
									P_CODCAD    DBVESTIB.CADERNO.CODCAD%TYPE,
									P_CODCUR    DBVESTIB.CURSO.CODCUR%TYPE,
									P_CODCAMPUS DBVESTIB.CANDIDATO.CODCAMPROXRESIDENCIA%TYPE) RETURN NUMBER IS
	BEGIN
		RETURN(DBVESTIB.PC_DISTRIBUICAO.F_CAND_TOTAL_CAMPUS(P_CODCONC,
															P_CODCAD,
															P_CODCUR,
															P_CODCAMPUS) - DBVESTIB.PC_DISTRIBUICAO.F_CAND_ALOC_CAMPUS(P_CODCONC,
																													   P_CODCAD,
																													   P_CODCUR,
																													   P_CODCAMPUS));
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 0;
	END;

	-- METODO PARA RETORNAR O TOTAL DE CANDIDATOS DO CADERNO
	FUNCTION F_CAND_TOTAL_CADERNO(P_CODCONC DBVESTIB.CADERNO.CODCONC%TYPE,
								  P_CODCAD  DBVESTIB.CADERNO.CODCAD%TYPE) RETURN NUMBER IS
		N_TOTAL NUMBER;
	BEGIN
		-- RECUPERANDO O TOTAL DE CANDIDATOS DO CADERNO
		SELECT COUNT(*)
		  INTO N_TOTAL
		  FROM DBVESTIB.CADERNO        CAD,
			   DBVESTIB.CURSOSCADERNO  CCA,
			   DBVESTIB.RCANDCURTUROPC RCC
		 WHERE CAD.CODCONC = CCA.CODCONC
			   AND CAD.CODCAD = CCA.CODCAD
			   AND CAD.CODCONC = P_CODCONC
			   AND CAD.CODCAD = P_CODCAD
			   AND RCC.CODCONC = CAD.CODCONC
			   AND RCC.CODCONC = CCA.CODCONC
			   AND RCC.CODCUR = CCA.CODCUR
			   AND RCC.NROOPC = '1'
			   AND DBVESTIB.PC_CLASSIFICACAO.F_CANDIDATO_ETAPA(RCC.CODCONC,
															   RCC.CODCAN,
															   CAD.COD_ETAPA) = 'S';
	
		RETURN N_TOTAL; -- TOTAL DE CANDIDATOS
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 0;
	END;

	-- METODO PARA RETORNAR O TOTAL DO CURSO
	FUNCTION F_CAND_TOTAL_CURSO(P_CODCONC DBVESTIB.CADERNO.CODCONC%TYPE,
								P_CODCAD  DBVESTIB.CADERNO.CODCAD%TYPE,
								P_CODCUR  DBVESTIB.CURSO.CODCUR%TYPE) RETURN NUMBER IS
		N_TOTAL NUMBER;
	BEGIN
		-- RECUPERANDO O TOTAL DE CANDIDATOS DO CURSO
		SELECT COUNT(*)
		  INTO N_TOTAL
		  FROM DBVESTIB.CADERNO        CAD,
			   DBVESTIB.CURSOSCADERNO  CCA,
			   DBVESTIB.RCANDCURTUROPC RCC
		 WHERE CAD.CODCONC = CCA.CODCONC
			   AND CAD.CODCAD = CCA.CODCAD
			   AND CAD.CODCONC = P_CODCONC
			   AND CAD.CODCAD = P_CODCAD
			   AND CCA.CODCUR = P_CODCUR
			   AND RCC.CODCONC = CAD.CODCONC
			   AND RCC.CODCONC = CCA.CODCONC
			   AND RCC.CODCUR = CCA.CODCUR
			   AND RCC.NROOPC = '1'
			   AND DBVESTIB.PC_CLASSIFICACAO.F_CANDIDATO_ETAPA(RCC.CODCONC,
															   RCC.CODCAN,
															   CAD.COD_ETAPA) = 'S';
	
		RETURN N_TOTAL; -- TOTAL DE CANDIDATOS
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 0;
	END;

	-- METODO PARA RETORNAR O TOTAL DA CIDADE/BAIRRO
	FUNCTION F_CAND_TOTAL_BAIRRO(P_CODCONC    DBVESTIB.CADERNO.CODCONC%TYPE,
								 P_CODCAD     DBVESTIB.CADERNO.CODCAD%TYPE,
								 P_CODCUR     DBVESTIB.CURSO.CODCUR%TYPE,
								 P_NOM_CIDADE DBVESTIB.CANDIDATO.CIDCAN%TYPE,
								 P_NOM_BAIRRO DBVESTIB.CANDIDATO.BAICAN%TYPE) RETURN NUMBER IS
		N_TOTAL NUMBER;
	BEGIN
		-- RECUPERANDO O TOTAL DE CANDIDATOS DO CURSO
		SELECT COUNT(*)
		  INTO N_TOTAL
		  FROM DBVESTIB.CADERNO        CAD,
			   DBVESTIB.CURSOSCADERNO  CCA,
			   DBVESTIB.RCANDCURTUROPC RCC,
			   DBVESTIB.CANDIDATO      CAN
		 WHERE CAD.CODCONC = CCA.CODCONC
			   AND CAD.CODCAD = CCA.CODCAD
			   AND CAD.CODCONC = P_CODCONC
			   AND CAD.CODCAD = P_CODCAD
			   AND CCA.CODCUR = P_CODCUR
			   AND RCC.CODCONC = CAD.CODCONC
			   AND RCC.CODCONC = CCA.CODCONC
			   AND RCC.CODCUR = CCA.CODCUR
			   AND CAN.CODCONC = RCC.CODCONC
			   AND CAN.CODCAN = RCC.CODCAN
			   AND RCC.NROOPC = '1'
			   AND TRIM(CAN.CIDCAN) = TRIM(P_NOM_CIDADE)
			   AND TRIM(CAN.BAICAN) = TRIM(P_NOM_BAIRRO)
			   AND DBVESTIB.PC_CLASSIFICACAO.F_CANDIDATO_ETAPA(RCC.CODCONC,
															   RCC.CODCAN,
															   CAD.COD_ETAPA) = 'S';
	
		RETURN N_TOTAL; -- TOTAL DE CANDIDATOS
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 0;
	END;

	-- METODO PARA RETORNAR O TOTAL DO CAMPUS
	FUNCTION F_CAND_TOTAL_CAMPUS(P_CODCONC   DBVESTIB.CADERNO.CODCONC%TYPE,
								 P_CODCAD    DBVESTIB.CADERNO.CODCAD%TYPE,
								 P_CODCUR    DBVESTIB.CURSO.CODCUR%TYPE,
								 P_CODCAMPUS DBVESTIB.CANDIDATO.CODCAMPROXRESIDENCIA%TYPE) RETURN NUMBER IS
		N_TOTAL NUMBER;
	BEGIN
		-- RECUPERANDO O TOTAL DE CANDIDATOS DO CURSO
		SELECT COUNT(*)
		  INTO N_TOTAL
		  FROM DBVESTIB.CADERNO        CAD,
			   DBVESTIB.CURSOSCADERNO  CCA,
			   DBVESTIB.RCANDCURTUROPC RCC,
			   DBVESTIB.CANDIDATO      CAN
		 WHERE CAD.CODCONC = CCA.CODCONC
			   AND CAD.CODCAD = CCA.CODCAD
			   AND CAD.CODCONC = P_CODCONC
			   AND CAD.CODCAD = P_CODCAD
			   AND CCA.CODCUR = P_CODCUR
			   AND RCC.CODCONC = CAD.CODCONC
			   AND RCC.CODCONC = CCA.CODCONC
			   AND RCC.CODCUR = CCA.CODCUR
			   AND CAN.CODCONC = RCC.CODCONC
			   AND CAN.CODCAN = RCC.CODCAN
			   AND RCC.NROOPC = '1'
			   AND CAN.CODCAMPROXRESIDENCIA = P_CODCAMPUS
			   AND DBVESTIB.PC_CLASSIFICACAO.F_CANDIDATO_ETAPA(RCC.CODCONC,
															   RCC.CODCAN,
															   CAD.COD_ETAPA) = 'S';
	
		RETURN N_TOTAL; -- TOTAL DE CANDIDATOS
	EXCEPTION
		WHEN OTHERS THEN
			RETURN 0;
	END;

	/**
    * Metodo para distribuir candidato automaticamente
    *
    * @author Erix Henrique Morato <emorato@unibh.br>
    * @since 29/09/2008
    * @access public
    */
	PROCEDURE SP_DISTRIBUIR_CANDIDATO(P_CODCONC   DBVESTIB.DISTRIBUICAO_CANDIDATO.CODCONC%TYPE,
									  P_CODCAN    DBVESTIB.DISTRIBUICAO_CANDIDATO.CODCAN%TYPE,
									  P_COD_ETAPA DBVESTIB.DISTRIBUICAO_CANDIDATO.COD_ETAPA%TYPE DEFAULT NULL,
									  P_INSC_PAGA CHAR DEFAULT 'S') IS
		N_COD_ETAPA DBVESTIB.DISTRIBUICAO_CANDIDATO.COD_ETAPA%TYPE;
		V_CODLOC    DBVESTIB.DISTRIBUICAO_CANDIDATO.CODLOC%TYPE;
		V_CODSAL    DBVESTIB.DISTRIBUICAO_CANDIDATO.CODSAL%TYPE;
		V_CODCAD    DBVESTIB.CURSOSCADERNO.CODCAD%TYPE;
	BEGIN
	
		-- Distribuicao para candidato que pagou taxa de inscr.
	
		IF P_INSC_PAGA = 'S' THEN
		
			IF P_COD_ETAPA IS NULL THEN
				-- RECUPERANDO ETAPA QUE SERÁ ALOCADO CANDIDATO
				N_COD_ETAPA := 1;
				IF DBVESTIB.PC_CLASSIFICACAO.F_CANDIDATO_ETAPA(P_CODCONC,
															   P_CODCAN,
															   2) = 'S' THEN
					N_COD_ETAPA := 2;
				END IF;
			ELSE
				IF (P_COD_ETAPA <> 1)
				   AND DBVESTIB.PC_CLASSIFICACAO.F_CANDIDATO_ETAPA(P_CODCONC,
																   P_CODCAN,
																   P_COD_ETAPA) = 'S' THEN
					N_COD_ETAPA := P_COD_ETAPA;
				ELSE
					N_COD_ETAPA := 1;
				END IF;
			END IF;
		
			-- Remove candidato da tabela de distribuicao de nao pagos
		
			DELETE DBVESTIB.DISTRIBUICAO_INSCRICAO DCI
			 WHERE DCI.CODCONC = P_CODCONC
				   AND DCI.CODINSC = P_CODCAN
				   AND DCI.COD_ETAPA = N_COD_ETAPA;
		
			-- BUSCANDO CADERNO DO CANDIDATO
			SELECT CCC.CODCAD
			  INTO V_CODCAD
			  FROM DBVESTIB.CURSOSCADERNO  CCC,
				   DBVESTIB.RCANDCURTUROPC RCC,
				   DBVESTIB.CADERNO        CAD,
				   DBVESTIB.CANDIDATO      CAN
			 WHERE CCC.CODCONC = RCC.CODCONC
				   AND CCC.CODCUR = RCC.CODCUR
				   AND RCC.CODCONC = P_CODCONC
				   AND RCC.CODCAN = P_CODCAN
				   AND RCC.NROOPC = '1'
				   AND CCC.CODCONC = CAD.CODCONC
				   AND CCC.CODCAD = CAD.CODCAD
				   AND CAN.CODCONC = RCC.CODCONC
				   AND CAN.CODCAN = RCC.CODCAN
				   AND CAD.COD_ETAPA = N_COD_ETAPA
				   AND ((CAN.CODFORMAPROVA IS NULL) OR (CAN.CODFORMAPROVA IN (1,
																			  4)) OR (CAN.CODFORMAPROVA = 2 AND CAD.COD_ETAPA > 1))
				   AND NOT EXISTS (SELECT 1
					  FROM DBVESTIB.DISTRIBUICAO_CANDIDATO DCA
					 WHERE DCA.CODCONC = CAN.CODCONC
						   AND DCA.CODCAN = CAN.CODCAN
						   AND DCA.COD_ETAPA = CAD.COD_ETAPA)
				   AND ROWNUM = 1;
		
			--Se a etapa for maior que 1 tenta usar as mesmas salas de distribuição da segunda etapa
			IF N_COD_ETAPA > 1 THEN
				BEGIN
				
					SELECT DDC.CODLOC,
						   DDC.CODSAL
					  INTO V_CODLOC,
						   V_CODSAL
					  FROM DBVESTIB.DISTRIBUICAO_CANDIDATO DDC,
						   DBVESTIB.RCANDCURTUROPC         RCC,
						   DBVESTIB.CADERNOSALA            CDS,
						   DBVESTIB.LOCAL                  LOC,
						   DBVESTIB.SALA                   SAL
					 WHERE DDC.CODCONC = P_CODCONC
						   AND DDC.CODCAN = P_CODCAN
						   AND DDC.COD_ETAPA = (N_COD_ETAPA - 1)
						   AND RCC.CODCONC = DDC.CODCONC
						   AND RCC.CODCAN = DDC.CODCAN
						   AND RCC.NROOPC = '1'
						   AND CDS.CODCONC = RCC.CODCONC
						   AND CDS.CODCAD = V_CODCAD
						   AND CDS.CODCUR = RCC.CODCUR
						   AND CDS.CODLOC = DDC.CODLOC
						   AND CDS.CODSAL = DDC.CODSAL
						   AND DDC.CODCONC = LOC.CODCONC
						   AND DDC.CODLOC = LOC.CODLOC
						   AND DDC.CODSAL = SAL.CODSAL
						   AND DDC.CODCONC = SAL.CODCONC
						   AND SAL.CODLOC = LOC.CODLOC
						   AND SAL.CAPSAL > 0
						   AND CDS.IND_INSC_PAGA = 'S'
						   AND EXISTS (SELECT 1
							  FROM DUAL
							 WHERE DBVESTIB.PC_DISTRIBUICAO.F_STATUS_DISTIB_SALA(CDS.CODCONC,
																				 CDS.CODLOC,
																				 CDS.CODSAL,
																				 N_COD_ETAPA) <> 'C'
								   AND ROWNUM = 1);
				
				EXCEPTION
					WHEN OTHERS THEN
						NULL;
					
				END;
			END IF;
		
			IF V_CODLOC IS NULL
			   OR V_CODSAL IS NULL THEN
			
				-- BUSCANDO LOCAL E SALA QUE O CANDIDATO SERÁ ALOCADO
				BEGIN
					-- Com Instituição/Curso e Campus
					SELECT CODLOC,
						   CODSAL
					  INTO V_CODLOC,
						   V_CODSAL
					  FROM (SELECT CDS.CODLOC,
								   CDS.CODSAL
							  FROM DBVESTIB.CADERNO        CAD,
								   DBVESTIB.CADERNOSALA    CDS,
								   DBVESTIB.LOCAL          LOC,
								   DBVESTIB.SALA           SAL,
								   DBVESTIB.RCANDCURTUROPC RCC,
								   DBVESTIB.CAMPUS         CAM
							 WHERE CDS.CODCONC = P_CODCONC
								   AND CDS.CODCAD = V_CODCAD
								   AND CAD.COD_ETAPA = N_COD_ETAPA
								   AND CAD.CODCONC = CDS.CODCONC
								   AND CAD.CODCAD = CDS.CODCAD
								   AND CDS.CODCONC = LOC.CODCONC
								   AND CDS.CODLOC = LOC.CODLOC
								   AND LOC.CODCONC = SAL.CODCONC
								   AND LOC.CODLOC = SAL.CODLOC
								   AND CDS.CODSAL = SAL.CODSAL
								   AND RCC.CODCONC = CDS.CODCONC
								   AND RCC.CODCAN = P_CODCAN
								   AND RCC.NROOPC = '1'
								   AND SAL.CAPSAL > 0
								   AND CDS.CODINSTITUICAO = RCC.CODINSTITUICAO
								   AND CDS.CODCUR = RCC.CODCUR
								   AND CDS.CODCAM = CAM.CODCAM
								   AND CDS.IND_INSC_PAGA = 'S'
								   AND NOT EXISTS (SELECT 1
									  FROM DBVESTIB.DISTRIBUICAO_CANDIDATO DCC
									 WHERE DCC.CODCONC = RCC.CODCONC
										   AND DCC.CODCONC = CDS.CODCONC
										   AND DCC.CODCAN = RCC.CODCAN
										   AND DCC.COD_ETAPA = CAD.COD_ETAPA)
								   AND EXISTS (SELECT 1
									  FROM DUAL
									 WHERE DBVESTIB.PC_DISTRIBUICAO.F_STATUS_DISTIB_SALA(CDS.CODCONC,
																						 CDS.CODLOC,
																						 CDS.CODSAL,
																						 CAD.COD_ETAPA) <> 'C'
										   AND ROWNUM = 1)
							 ORDER BY LOC.ORDDISTRIBUICAO,
									  SAL.ORD_DISTRIBUICAO,
									  CDS.CODSAL)
					 WHERE ROWNUM = 1;
				EXCEPTION
					WHEN OTHERS THEN
						BEGIN
							-- Com Instuicao e Campus
							SELECT CODLOC,
								   CODSAL
							  INTO V_CODLOC,
								   V_CODSAL
							  FROM (SELECT CDS.CODLOC,
										   CDS.CODSAL
									  FROM DBVESTIB.CADERNO        CAD,
										   DBVESTIB.CADERNOSALA    CDS,
										   DBVESTIB.LOCAL          LOC,
										   DBVESTIB.SALA           SAL,
										   DBVESTIB.RCANDCURTUROPC RCC,
										   DBVESTIB.CAMPUS         CAM
									 WHERE CDS.CODCONC = P_CODCONC
										   AND CDS.CODCAD = V_CODCAD
										   AND CAD.COD_ETAPA = N_COD_ETAPA
										   AND CAD.CODCONC = CDS.CODCONC
										   AND CAD.CODCAD = CDS.CODCAD
										   AND CDS.CODCONC = LOC.CODCONC
										   AND CDS.CODLOC = LOC.CODLOC
										   AND LOC.CODCONC = SAL.CODCONC
										   AND LOC.CODLOC = SAL.CODLOC
										   AND CDS.CODSAL = SAL.CODSAL
										   AND RCC.CODCONC = CDS.CODCONC
										   AND RCC.CODCAN = P_CODCAN
										   AND RCC.NROOPC = '1'
										   AND SAL.CAPSAL > 0
										   AND CDS.CODINSTITUICAO = RCC.CODINSTITUICAO
										   AND CDS.CODCUR IS NULL
										   AND CDS.CODCAM = CAM.CODCAM
										   AND CDS.IND_INSC_PAGA = 'S'
										   AND NOT EXISTS (SELECT 1
											  FROM DBVESTIB.CADERNOSALA CDS1
											 WHERE CDS.CODCONC = CDS1.CODCONC
												   AND CDS.CODCAD = CDS1.CODCAD
												   AND CDS.CODINSTITUICAO = CDS1.CODINSTITUICAO
												   AND CDS1.CODCUR = RCC.CODCUR)
										   AND NOT EXISTS (SELECT 1
											  FROM DBVESTIB.DISTRIBUICAO_CANDIDATO DCC
											 WHERE DCC.CODCONC = RCC.CODCONC
												   AND DCC.CODCONC = CDS.CODCONC
												   AND DCC.CODCAN = RCC.CODCAN
												   AND DCC.COD_ETAPA = CAD.COD_ETAPA)
										   AND EXISTS (SELECT 1
											  FROM DUAL
											 WHERE DBVESTIB.PC_DISTRIBUICAO.F_STATUS_DISTIB_SALA(CDS.CODCONC,
																								 CDS.CODLOC,
																								 CDS.CODSAL,
																								 CAD.COD_ETAPA) <> 'C'
												   AND ROWNUM = 1)
									 ORDER BY LOC.ORDDISTRIBUICAO,
											  SAL.ORD_DISTRIBUICAO,
											  CDS.CODSAL)
							 WHERE ROWNUM = 1;
						EXCEPTION
							WHEN OTHERS THEN
								BEGIN
									-- Só Instituição
									SELECT CODLOC,
										   CODSAL
									  INTO V_CODLOC,
										   V_CODSAL
									  FROM (SELECT CDS.CODLOC,
												   CDS.CODSAL
											  FROM DBVESTIB.CADERNO        CAD,
												   DBVESTIB.CADERNOSALA    CDS,
												   DBVESTIB.LOCAL          LOC,
												   DBVESTIB.SALA           SAL,
												   DBVESTIB.RCANDCURTUROPC RCC
											 WHERE CDS.CODCONC = P_CODCONC
												   AND CDS.CODCAD = V_CODCAD
												   AND CAD.COD_ETAPA = N_COD_ETAPA
												   AND CAD.CODCONC = CDS.CODCONC
												   AND CAD.CODCAD = CDS.CODCAD
												   AND CDS.CODCONC = LOC.CODCONC
												   AND CDS.CODLOC = LOC.CODLOC
												   AND LOC.CODCONC = SAL.CODCONC
												   AND LOC.CODLOC = SAL.CODLOC
												   AND CDS.CODSAL = SAL.CODSAL
												   AND RCC.CODCONC = CDS.CODCONC
												   AND RCC.CODCAN = P_CODCAN
												   AND RCC.NROOPC = '1'
												   AND SAL.CAPSAL > 0
												   AND CDS.CODINSTITUICAO = RCC.CODINSTITUICAO
												   AND CDS.CODCUR IS NULL
												   AND CDS.CODCAM IS NULL
												   AND CDS.IND_INSC_PAGA = 'S'
												   AND NOT EXISTS (SELECT 1
													  FROM DBVESTIB.CADERNOSALA CDS1
													 WHERE CDS.CODCONC = CDS1.CODCONC
														   AND CDS.CODCAD = CDS1.CODCAD
														   AND CDS.CODINSTITUICAO = CDS1.CODINSTITUICAO
														   AND CDS1.CODCUR = RCC.CODCUR)
												   AND NOT EXISTS (SELECT 1
													  FROM DBVESTIB.DISTRIBUICAO_CANDIDATO DCC
													 WHERE DCC.CODCONC = RCC.CODCONC
														   AND DCC.CODCONC = CDS.CODCONC
														   AND DCC.CODCAN = RCC.CODCAN
														   AND DCC.COD_ETAPA = CAD.COD_ETAPA)
												   AND EXISTS (SELECT 1
													  FROM DUAL
													 WHERE DBVESTIB.PC_DISTRIBUICAO.F_STATUS_DISTIB_SALA(CDS.CODCONC,
																										 CDS.CODLOC,
																										 CDS.CODSAL,
																										 CAD.COD_ETAPA) <> 'C'
														   AND ROWNUM = 1)
											 ORDER BY LOC.ORDDISTRIBUICAO,
													  SAL.ORD_DISTRIBUICAO,
													  CDS.CODSAL)
									 WHERE ROWNUM = 1;
								EXCEPTION
									WHEN OTHERS THEN
										-- Sem Instutição/Campus e Curso
										SELECT CODLOC,
											   CODSAL
										  INTO V_CODLOC,
											   V_CODSAL
										  FROM (SELECT CDS.CODLOC,
													   CDS.CODSAL
												  FROM DBVESTIB.CADERNO        CAD,
													   DBVESTIB.CADERNOSALA    CDS,
													   DBVESTIB.LOCAL          LOC,
													   DBVESTIB.SALA           SAL,
													   DBVESTIB.RCANDCURTUROPC RCC
												 WHERE CDS.CODCONC = P_CODCONC
													   AND CDS.CODCAD = V_CODCAD
													   AND CAD.COD_ETAPA = N_COD_ETAPA
													   AND CAD.CODCONC = CDS.CODCONC
													   AND CAD.CODCAD = CDS.CODCAD
													   AND CDS.CODCONC = LOC.CODCONC
													   AND CDS.CODLOC = LOC.CODLOC
													   AND LOC.CODCONC = SAL.CODCONC
													   AND LOC.CODLOC = SAL.CODLOC
													   AND CDS.CODSAL = SAL.CODSAL
													   AND RCC.CODCONC = CDS.CODCONC
													   AND RCC.CODCAN = P_CODCAN
													   AND RCC.NROOPC = '1'
													   AND CDS.CODINSTITUICAO IS NULL
													   AND CDS.CODCUR IS NULL
													   AND CDS.CODCAM IS NULL
													   AND SAL.CAPSAL > 0
													   AND CDS.IND_INSC_PAGA = 'S'
													   AND NOT EXISTS (SELECT 1
														  FROM DBVESTIB.CADERNOSALA CDS1
														 WHERE CDS.CODCONC = CDS1.CODCONC
															   AND CDS.CODCAD = CDS1.CODCAD
															   AND (((CDS1.CODINSTITUICAO = RCC.CODINSTITUICAO) AND (CDS1.CODCUR IS NULL)) OR ((CDS1.CODINSTITUICAO IS NULL) AND (CDS1.CODCUR = RCC.CODCUR))))
													   AND NOT EXISTS (SELECT 1
														  FROM DBVESTIB.DISTRIBUICAO_CANDIDATO DCC
														 WHERE DCC.CODCONC = RCC.CODCONC
															   AND DCC.CODCONC = CDS.CODCONC
															   AND DCC.CODCAN = RCC.CODCAN
															   AND DCC.COD_ETAPA = CAD.COD_ETAPA)
													   AND EXISTS (SELECT 1
														  FROM DUAL
														 WHERE DBVESTIB.PC_DISTRIBUICAO.F_STATUS_DISTIB_SALA(CDS.CODCONC,
																											 CDS.CODLOC,
																											 CDS.CODSAL,
																											 CAD.COD_ETAPA) <> 'C'
															   AND ROWNUM = 1)
												 ORDER BY LOC.ORDDISTRIBUICAO,
														  SAL.ORD_DISTRIBUICAO,
														  CDS.CODSAL)
										 WHERE ROWNUM = 1;
								END;
						END;
				END;
			
			END IF;
		
			-- ALOCANDO CANDIDATO
			INSERT INTO DBVESTIB.DISTRIBUICAO_CANDIDATO
				(COD_DISTRIBUICAO,
				 CODCONC,
				 CODCAN,
				 COD_ETAPA,
				 CODLOC,
				 CODSAL)
				SELECT DBVESTIB.DISTRIBUICAO_CANDIDATO_S.NEXTVAL,
					   CAN.CODCONC,
					   CAN.CODCAN,
					   N_COD_ETAPA,
					   V_CODLOC,
					   V_CODSAL
				  FROM DBVESTIB.CANDIDATO CAN
				 WHERE CAN.CODCONC = P_CODCONC
					   AND CAN.CODCAN = P_CODCAN
					   AND NOT EXISTS (SELECT 1
						  FROM DBVESTIB.DISTRIBUICAO_CANDIDATO DCC
						 WHERE DCC.CODCONC = CAN.CODCONC
							   AND DCC.CODCAN = CAN.CODCAN
							   AND DCC.COD_ETAPA = N_COD_ETAPA);
		
		ELSE
			-- Distribuicao de canditados que não pagaram a taxa de inscrição
		
			IF P_COD_ETAPA IS NULL THEN
				N_COD_ETAPA := 1;
			ELSE
				N_COD_ETAPA := P_COD_ETAPA;
			END IF;
		
			-- BUSCANDO CADERNO DO CANDIDATO
			SELECT CCC.CODCAD
			  INTO V_CODCAD
			  FROM DBVESTIB.CURSOSCADERNO  CCC,
				   DBVESTIB.OPCAOCANDIDATO OPC,
				   DBVESTIB.CADERNO        CAD,
				   DBVESTIB.INSCRICAO      INS
			 WHERE CCC.CODCONC = OPC.CODCONC
				   AND CCC.CODCUR = OPC.CODCUR
				   AND OPC.CODCONC = P_CODCONC
				   AND OPC.CODINSC = P_CODCAN
				   AND OPC.NROOPC = '1'
				   AND CCC.CODCONC = CAD.CODCONC
				   AND CCC.CODCAD = CAD.CODCAD
				   AND INS.CODCONC = OPC.CODCONC
				   AND INS.CODINSC = OPC.CODINSC
				   AND CAD.COD_ETAPA = N_COD_ETAPA
				   AND ((INS.CODFORMAPROVA IS NULL) OR (INS.CODFORMAPROVA IN (1,
																			  4)) OR (INS.CODFORMAPROVA = 2 AND CAD.COD_ETAPA > 1))
				   AND NOT EXISTS (SELECT 1
					  FROM DBVESTIB.DISTRIBUICAO_INSCRICAO DCI
					 WHERE DCI.CODCONC = INS.CODCONC
						   AND DCI.CODINSC = INS.CODINSC
						   AND DCI.COD_ETAPA = CAD.COD_ETAPA)
				   AND ROWNUM = 1;
		
			--Se a etapa for maior que 1 tenta usar as mesmas salas de distribuição da segunda etapa
			IF N_COD_ETAPA > 1 THEN
				BEGIN
				
					SELECT DDI.CODLOC,
						   DDI.CODSAL
					  INTO V_CODLOC,
						   V_CODSAL
					  FROM DBVESTIB.DISTRIBUICAO_INSCRICAO DDI,
						   DBVESTIB.OPCAOCANDIDATO         OPC,
						   DBVESTIB.CADERNOSALA            CDS,
						   DBVESTIB.LOCAL                  LOC,
						   DBVESTIB.SALA                   SAL
					 WHERE DDI.CODCONC = P_CODCONC
						   AND DDI.CODINSC = P_CODCAN
						   AND DDI.COD_ETAPA = (N_COD_ETAPA - 1)
						   AND OPC.CODCONC = DDI.CODCONC
						   AND OPC.CODINSC = DDI.CODINSC
						   AND OPC.NROOPC = '1'
						   AND CDS.CODCONC = OPC.CODCONC
						   AND CDS.CODCAD = V_CODCAD
						   AND CDS.IND_INSC_PAGA = 'N'
						   AND CDS.CODCUR = OPC.CODCUR
						   AND DDI.CODCONC = LOC.CODCONC
						   AND DDI.CODLOC = LOC.CODLOC
						   AND DDI.CODSAL = SAL.CODSAL
						   AND DDI.CODCONC = SAL.CODCONC
						   AND SAL.CODLOC = LOC.CODLOC
						   AND SAL.CAPSAL > 0
						   AND CDS.IND_INSC_PAGA = 'N'
						   AND EXISTS (SELECT 1
							  FROM DUAL
							 WHERE DBVESTIB.PC_DISTRIBUICAO.F_STATUS_DISTIB_SALA(CDS.CODCONC,
																				 CDS.CODLOC,
																				 CDS.CODSAL,
																				 N_COD_ETAPA) <> 'C'
								   AND ROWNUM = 1);
				
				EXCEPTION
					WHEN OTHERS THEN
						NULL;
					
				END;
			END IF;
		
			IF V_CODLOC IS NULL
			   OR V_CODSAL IS NULL THEN
			
				-- BUSCANDO LOCAL E SALA QUE O CANDIDATO SERÁ ALOCADO
				BEGIN
					SELECT CODLOC,
						   CODSAL
					  INTO V_CODLOC,
						   V_CODSAL
					  FROM (SELECT CDS.CODLOC,
								   CDS.CODSAL
							  FROM DBVESTIB.CADERNO        CAD,
								   DBVESTIB.CADERNOSALA    CDS,
								   DBVESTIB.LOCAL          LOC,
								   DBVESTIB.SALA           SAL,
								   DBVESTIB.OPCAOCANDIDATO OPC
							 WHERE CDS.CODCONC = P_CODCONC
								   AND CDS.CODCAD = V_CODCAD
								   AND CAD.COD_ETAPA = N_COD_ETAPA
								   AND CAD.CODCONC = CDS.CODCONC
								   AND CAD.CODCAD = CDS.CODCAD
								   AND CDS.CODCONC = LOC.CODCONC
								   AND CDS.CODLOC = LOC.CODLOC
								   AND LOC.CODCONC = SAL.CODCONC
								   AND LOC.CODLOC = SAL.CODLOC
								   AND CDS.CODSAL = SAL.CODSAL
								   AND OPC.CODCONC = CDS.CODCONC
								   AND OPC.CODINSC = P_CODCAN
								   AND OPC.NROOPC = '1'
								   AND SAL.CAPSAL > 0
								   AND CDS.CODINSTITUICAO = OPC.CODINSTITUICAO
								   AND CDS.CODCUR = OPC.CODCUR
								   AND CDS.IND_INSC_PAGA = 'N'
								   AND NOT EXISTS (SELECT 1
									  FROM DBVESTIB.DISTRIBUICAO_INSCRICAO DCI
									 WHERE DCI.CODCONC = OPC.CODCONC
										   AND DCI.CODCONC = CDS.CODCONC
										   AND DCI.CODINSC = OPC.CODINSC
										   AND DCI.COD_ETAPA = CAD.COD_ETAPA)
								   AND EXISTS (SELECT 1
									  FROM DUAL
									 WHERE DBVESTIB.PC_DISTRIBUICAO.F_STATUS_DISTIB_SALA(CDS.CODCONC,
																						 CDS.CODLOC,
																						 CDS.CODSAL,
																						 CAD.COD_ETAPA) <> 'C'
										   AND ROWNUM = 1)
							 ORDER BY LOC.ORDDISTRIBUICAO,
									  SAL.ORD_DISTRIBUICAO,
									  CDS.CODSAL)
					 WHERE ROWNUM = 1;
				EXCEPTION
					WHEN OTHERS THEN
						BEGIN
							SELECT CODLOC,
								   CODSAL
							  INTO V_CODLOC,
								   V_CODSAL
							  FROM (SELECT CDS.CODLOC,
										   CDS.CODSAL
									  FROM DBVESTIB.CADERNO        CAD,
										   DBVESTIB.CADERNOSALA    CDS,
										   DBVESTIB.LOCAL          LOC,
										   DBVESTIB.SALA           SAL,
										   DBVESTIB.OPCAOCANDIDATO OPC
									 WHERE CDS.CODCONC = P_CODCONC
										   AND CDS.CODCAD = V_CODCAD
										   AND CAD.COD_ETAPA = N_COD_ETAPA
										   AND CAD.CODCONC = CDS.CODCONC
										   AND CAD.CODCAD = CDS.CODCAD
										   AND CDS.CODCONC = LOC.CODCONC
										   AND CDS.CODLOC = LOC.CODLOC
										   AND LOC.CODCONC = SAL.CODCONC
										   AND LOC.CODLOC = SAL.CODLOC
										   AND CDS.CODSAL = SAL.CODSAL
										   AND OPC.CODCONC = CDS.CODCONC
										   AND OPC.CODINSC = P_CODCAN
										   AND OPC.NROOPC = '1'
										   AND CDS.CODINSTITUICAO = OPC.CODINSTITUICAO
										   AND SAL.CAPSAL > 0
										   AND CDS.CODCUR IS NULL
										   AND CDS.IND_INSC_PAGA = 'N'
										   AND NOT EXISTS (SELECT 1
											  FROM DBVESTIB.CADERNOSALA CDS1
											 WHERE CDS.CODCONC = CDS1.CODCONC
												   AND CDS.CODCAD = CDS1.CODCAD
												   AND CDS.CODINSTITUICAO = CDS1.CODINSTITUICAO
												   AND CDS1.CODCUR = OPC.CODCUR)
										   AND NOT EXISTS (SELECT 1
											  FROM DBVESTIB.DISTRIBUICAO_INSCRICAO DCI
											 WHERE DCI.CODCONC = OPC.CODCONC
												   AND DCI.CODCONC = CDS.CODCONC
												   AND DCI.CODINSC = OPC.CODINSC
												   AND DCI.COD_ETAPA = CAD.COD_ETAPA)
										   AND EXISTS (SELECT 1
											  FROM DUAL
											 WHERE DBVESTIB.PC_DISTRIBUICAO.F_STATUS_DISTIB_SALA(CDS.CODCONC,
																								 CDS.CODLOC,
																								 CDS.CODSAL,
																								 CAD.COD_ETAPA) <> 'C'
												   AND ROWNUM = 1)
									 ORDER BY LOC.ORDDISTRIBUICAO,
											  SAL.ORD_DISTRIBUICAO,
											  CDS.CODSAL)
							 WHERE ROWNUM = 1;
						EXCEPTION
							WHEN OTHERS THEN
								SELECT CODLOC,
									   CODSAL
								  INTO V_CODLOC,
									   V_CODSAL
								  FROM (SELECT CDS.CODLOC,
											   CDS.CODSAL
										  FROM DBVESTIB.CADERNO        CAD,
											   DBVESTIB.CADERNOSALA    CDS,
											   DBVESTIB.LOCAL          LOC,
											   DBVESTIB.SALA           SAL,
											   DBVESTIB.OPCAOCANDIDATO OPC
										 WHERE CDS.CODCONC = P_CODCONC
											   AND CDS.CODCAD = V_CODCAD
											   AND CAD.COD_ETAPA = N_COD_ETAPA
											   AND CAD.CODCONC = CDS.CODCONC
											   AND CAD.CODCAD = CDS.CODCAD
											   AND CDS.CODCONC = LOC.CODCONC
											   AND CDS.CODLOC = LOC.CODLOC
											   AND LOC.CODCONC = SAL.CODCONC
											   AND LOC.CODLOC = SAL.CODLOC
											   AND CDS.CODSAL = SAL.CODSAL
											   AND OPC.CODCONC = CDS.CODCONC
											   AND OPC.CODINSC = P_CODCAN
											   AND OPC.NROOPC = '1'
											   AND CDS.CODINSTITUICAO IS NULL
											   AND CDS.CODCUR IS NULL
											   AND SAL.CAPSAL > 0
											   AND CDS.IND_INSC_PAGA = 'N'
											   AND NOT EXISTS (SELECT 1
												  FROM DBVESTIB.CADERNOSALA CDS1
												 WHERE CDS.CODCONC = CDS1.CODCONC
													   AND CDS.CODCAD = CDS1.CODCAD
													   AND (((CDS1.CODINSTITUICAO = OPC.CODINSTITUICAO) AND (CDS1.CODCUR IS NULL)) OR ((CDS1.CODINSTITUICAO IS NULL) AND (CDS1.CODCUR = OPC.CODCUR))))
											   AND NOT EXISTS (SELECT 1
												  FROM DBVESTIB.DISTRIBUICAO_INSCRICAO DCI
												 WHERE DCI.CODCONC = OPC.CODCONC
													   AND DCI.CODCONC = CDS.CODCONC
													   AND DCI.CODINSC = OPC.CODINSC
													   AND DCI.COD_ETAPA = CAD.COD_ETAPA)
											   AND EXISTS (SELECT 1
												  FROM DUAL
												 WHERE DBVESTIB.PC_DISTRIBUICAO.F_STATUS_DISTIB_SALA(CDS.CODCONC,
																									 CDS.CODLOC,
																									 CDS.CODSAL,
																									 CAD.COD_ETAPA) <> 'C'
													   AND ROWNUM = 1)
										 ORDER BY LOC.ORDDISTRIBUICAO,
												  SAL.ORD_DISTRIBUICAO,
												  CDS.CODSAL)
								 WHERE ROWNUM = 1;
						END;
				END;
			
			END IF;
		
			-- ALOCANDO CANDIDATO
			INSERT INTO DBVESTIB.DISTRIBUICAO_INSCRICAO
				(COD_DISTRIBUICAO,
				 CODCONC,
				 CODINSC,
				 COD_ETAPA,
				 CODLOC,
				 CODSAL)
				SELECT DBVESTIB.DISTRIBUICAO_INSCRICAO_S.NEXTVAL,
					   INS.CODCONC,
					   INS.CODINSC,
					   N_COD_ETAPA,
					   V_CODLOC,
					   V_CODSAL
				  FROM DBVESTIB.INSCRICAO INS
				 WHERE INS.CODCONC = P_CODCONC
					   AND INS.CODINSC = P_CODCAN
					   AND NOT EXISTS (SELECT 1
						  FROM DBVESTIB.DISTRIBUICAO_INSCRICAO DCI
						 WHERE DCI.CODCONC = INS.CODCONC
							   AND DCI.CODINSC = INS.CODINSC
							   AND DCI.COD_ETAPA = N_COD_ETAPA);
		
		END IF;
	
	EXCEPTION
		WHEN OTHERS THEN
			NULL;
	END;

	/**
    * Metodo para distribuir todos os candidato não alocados automaticamente
    *
    * @author Erix Henrique Morato <emorato@unibh.br>
    * @since 29/09/2008
    * @access public
    */
	PROCEDURE SP_DISTRIBUIR(P_CODCONC   DBVESTIB.DISTRIBUICAO_CANDIDATO.CODCONC%TYPE,
							P_INSC_PAGA CHAR DEFAULT 'S') IS
	
		CURSOR C_CAND(P_COD_ETAPA DBVESTIB.ETAPA_CONCURSO.COD_ETAPA%TYPE) IS
			SELECT CAN.CODCAN,
				   (SELECT COUNT(1)
					  FROM DBVESTIB.DISTRIBUICAO_CANDIDATO DDC
					 WHERE DDC.CODCAN = CAN.CODCAN
						   AND DDC.CODCONC = CAN.CODCONC) AS TOTAL_DISTRIBUICAO
			  FROM DBVESTIB.CANDIDATO      CAN,
				   DBVESTIB.RCANDCURTUROPC RCT
			 WHERE CAN.CODCONC = P_CODCONC
				   AND CAN.CODCONC = RCT.CODCONC
				   AND CAN.CODCAN = RCT.CODCAN
				   AND RCT.NROOPC = '1'
				  --Se for candidato da primeira etapa e não tive sido distribuido na primeira etapa
				   AND ((P_COD_ETAPA = 1 AND NOT EXISTS (SELECT 1
														   FROM DBVESTIB.DISTRIBUICAO_CANDIDATO DCA
														  WHERE DCA.CODCONC = CAN.CODCONC
																AND DCA.CODCAN = CAN.CODCAN
																AND DCA.COD_ETAPA = P_COD_ETAPA)) OR
				   -- ou se for candidato da segunda etapa e tiver (distribuição na primeira ou for ENEM) e não tiver distribuição na segunda
				   (P_COD_ETAPA > 1 AND (EXISTS (SELECT 1
														FROM DBVESTIB.DISTRIBUICAO_CANDIDATO DCA
													   WHERE DCA.CODCONC = CAN.CODCONC
															 AND DCA.CODCAN = CAN.CODCAN
															 AND DCA.COD_ETAPA = P_COD_ETAPA - 1) OR CAN.CODFORMAPROVA = 2) AND NOT EXISTS (SELECT 1
																																				   FROM DBVESTIB.DISTRIBUICAO_CANDIDATO DCA
																																				  WHERE DCA.CODCONC = CAN.CODCONC
																																						AND DCA.CODCAN = CAN.CODCAN
																																						AND DCA.COD_ETAPA = P_COD_ETAPA)))
				  
				   AND EXISTS (SELECT 1
					  FROM DBVESTIB.CURSOSCADERNO CCAD,
						   DBVESTIB.CADERNO       CAD
					 WHERE CCAD.CODCONC = RCT.CODCONC
						   AND CCAD.CODCUR = RCT.CODCUR
						   AND CCAD.CODCONC = CAD.CODCONC
						   AND CCAD.CODCAD = CAD.CODCAD
						   AND CAD.COD_ETAPA = P_COD_ETAPA
					
					)
			 ORDER BY TOTAL_DISTRIBUICAO DESC;
	
		CURSOR C_INSC(P_COD_ETAPA DBVESTIB.ETAPA_CONCURSO.COD_ETAPA%TYPE) IS
			SELECT INS.CODINSC,
				   (SELECT COUNT(1)
					  FROM DBVESTIB.DISTRIBUICAO_INSCRICAO DDI
					 WHERE DDI.CODINSC = INS.CODINSC
						   AND DDI.CODINSC = INS.CODCONC) AS TOTAL_DISTRIBUICAO
			  FROM DBVESTIB.INSCRICAO      INS,
				   DBVESTIB.OPCAOCANDIDATO OPC
			 WHERE INS.CODCONC = P_CODCONC
				   AND INS.CODCONC = OPC.CODCONC
				   AND INS.CODINSC = OPC.CODINSC
				   AND OPC.NROOPC = '1'
				   AND INS.COD_STATUS_INSCRICAO = 1
				  --Se for candidato da primeira etapa e não tive sido distribuido na primeira etapa
				   AND ((P_COD_ETAPA = 1 AND NOT EXISTS (SELECT 1
														   FROM DBVESTIB.DISTRIBUICAO_INSCRICAO DDI
														  WHERE DDI.CODCONC = INS.CODCONC
																AND DDI.CODINSC = INS.CODINSC
																AND DDI.COD_ETAPA = P_COD_ETAPA)) OR
				   -- ou se for candidato da segunda etapa e tiver (distribuição na primeira ou for ENEM) e não tiver distribuição na segunda
				   (P_COD_ETAPA > 1 AND (EXISTS (SELECT 1
														FROM DBVESTIB.DISTRIBUICAO_INSCRICAO DDI
													   WHERE DDI.CODCONC = INS.CODCONC
															 AND DDI.CODINSC = INS.CODINSC
															 AND DDI.COD_ETAPA = P_COD_ETAPA - 1) OR INS.CODFORMAPROVA = 2) AND NOT EXISTS (SELECT 1
																																				   FROM DBVESTIB.DISTRIBUICAO_INSCRICAO DDI
																																				  WHERE DDI.CODCONC = INS.CODCONC
																																						AND DDI.CODINSC = DDI.CODINSC
																																						AND DDI.COD_ETAPA = P_COD_ETAPA)))
				   AND NOT EXISTS (SELECT 1
					  FROM DBVESTIB.CANDIDATO CAN
					 WHERE CAN.CODCONC = INS.CODCONC
						   AND CAN.CODCAN = INS.CODINSC
					
					)
				  
				   AND EXISTS (SELECT 1
					  FROM DBVESTIB.CURSOSCADERNO CCAD,
						   DBVESTIB.CADERNO       CAD
					 WHERE CCAD.CODCONC = OPC.CODCONC
						   AND CCAD.CODCUR = OPC.CODCUR
						   AND CCAD.CODCONC = CAD.CODCONC
						   AND CCAD.CODCAD = CAD.CODCAD
						   AND CAD.COD_ETAPA = P_COD_ETAPA
					
					)
			 ORDER BY TOTAL_DISTRIBUICAO DESC;
	
		CURSOR C_ETAPA IS
			SELECT COD_ETAPA
			  FROM DBVESTIB.ETAPA_CONCURSO ECO
			 WHERE EXISTS (SELECT 1
					  FROM DBVESTIB.CADERNO CAD
					 WHERE CAD.CODCONC = P_CODCONC
						   AND CAD.COD_ETAPA = ECO.COD_ETAPA)
			 ORDER BY COD_ETAPA ASC;
	
		N_COD_ETAPA DBVESTIB.ETAPA_CONCURSO.COD_ETAPA%TYPE;
	BEGIN
	
		/*
        SELECT MAX(ECO.COD_ETAPA)
         INTO N_COD_ETAPA
         FROM DBVESTIB.ETAPA_CONCURSO ECO
         WHERE EXISTS(
               SELECT 1
               FROM DBVESTIB.RCANDCURTUROPC RCC
               WHERE DBVESTIB.PC_CLASSIFICACAO.F_CANDIDATO_ETAPA(RCC.CODCONC, RCC.CODCAN,ECO.COD_ETAPA,RCC.CODINSTITUICAO, RCC.NROOPC) = 'S'
                     AND RCC.NROOPC = '1'
                     AND RCC.CODCONC = P_CODCONC
         );*/
	
		IF P_INSC_PAGA = 'S' THEN
		
			FOR R_ETAPA IN C_ETAPA LOOP
			
				FOR R_CAND IN C_CAND(R_ETAPA.COD_ETAPA) LOOP
					DBVESTIB.PC_DISTRIBUICAO.SP_DISTRIBUIR_CANDIDATO(P_CODCONC,
																	 R_CAND.CODCAN,
																	 R_ETAPA.COD_ETAPA);
				END LOOP;
			
			END LOOP;
		
		ELSE
		
			FOR R_ETAPA IN C_ETAPA LOOP
			
				FOR R_INSC IN C_INSC(R_ETAPA.COD_ETAPA) LOOP
					DBVESTIB.PC_DISTRIBUICAO.SP_DISTRIBUIR_CANDIDATO(P_CODCONC,
																	 R_INSC.CODINSC,
																	 R_ETAPA.COD_ETAPA,
																	 'N');
				END LOOP;
			
			END LOOP;
		
		END IF;
	
	EXCEPTION
		WHEN OTHERS THEN
			NULL;
	END;

END PC_DISTRIBUICAO;
/
