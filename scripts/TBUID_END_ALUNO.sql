CREATE OR REPLACE TRIGGER DBSIAF.TBUID_END_ALUNO                                                          
BEFORE DELETE OR UPDATE OR INSERT ON DBSIAF.END_ALUNO                                                     
REFERENCING OLD AS OLD NEW AS NEW                                                                         
FOR EACH ROW                                                                                              
DECLARE
	SCEP VARCHAR2(10);
BEGIN
	IF INSERTING
	   OR UPDATING THEN
		:NEW.COD_USUARIO_LOG  := DBSIAF.F_BUSCA_FUNCIONARIO(USER);
		:NEW.DAT_OPERACAO_LOG := SYSDATE;
		-- VALIDACAO DE CEP
		IF DBSIAF.F_BUSCA_FUNCIONARIO(USER) <> 13391 THEN
			SCEP := LPAD(DBSIAF.F_SO_NUMERO(TRIM(:NEW.CEP_ENDERECO)),
						 8,
						 '0');
			IF (SCEP IS NULL)
			   OR (SCEP = '00000000') THEN
				RAISE_APPLICATION_ERROR(-20500,
										'Aluno: ' || :NEW.COD_ALUNO || ' - CEP Inválido.' || SCEP);
			END IF;
		END IF;
	END IF;
	-- armazenando aluno para atualização da pessoa
	IF (INSERTING OR UPDATING)
	   AND (DBSIAF.PC_PESSOA.B_ATUALIZA_PESSOA) THEN
		DBSIAF.PC_MUTATING_TABLE.VNUMLINHASENDALUNO := DBSIAF.PC_MUTATING_TABLE.VNUMLINHASENDALUNO + 1;
		DBSIAF.PC_MUTATING_TABLE.VENDALUNO(DBSIAF.PC_MUTATING_TABLE.VNUMLINHASENDALUNO).COD_ALUNO := :NEW.COD_ALUNO;
		DBSIAF.PC_MUTATING_TABLE.VENDALUNO(DBSIAF.PC_MUTATING_TABLE.VNUMLINHASENDALUNO).COD_TPO_ENDERECO := :NEW.COD_TPO_ENDERECO;
	ELSIF (DELETING)
		  AND (DBSIAF.PC_PESSOA.B_ATUALIZA_PESSOA) THEN
		DBSIAF.PC_MUTATING_TABLE.VNUMLINHASENDALUNO := DBSIAF.PC_MUTATING_TABLE.VNUMLINHASENDALUNO + 1;
		DBSIAF.PC_MUTATING_TABLE.VENDALUNO(DBSIAF.PC_MUTATING_TABLE.VNUMLINHASENDALUNO).COD_ALUNO := :OLD.COD_ALUNO;
		DBSIAF.PC_MUTATING_TABLE.VENDALUNO(DBSIAF.PC_MUTATING_TABLE.VNUMLINHASENDALUNO).COD_TPO_ENDERECO := :OLD.COD_TPO_ENDERECO;
	END IF;
	-- VALIDAÇÃO DO TELEFONE
	IF INSERTING
	   OR UPDATING THEN
		IF ((:NEW.TEL_ENDERECO IS NOT NULL) AND (LENGTH(DBSIAF.F_SO_NUMERO(:NEW.TEL_ENDERECO)) < 10)) THEN
		
			RAISE_APPLICATION_ERROR(-20500,
									'O telefone deverá possuir apenas dígitos. Sendo DDD (02 dígitos) e Telefone (10 dígitos).');
		END IF;
	
		IF ((:NEW.FAX_NUMERO IS NOT NULL) AND (LENGTH(DBSIAF.F_SO_NUMERO(:NEW.FAX_NUMERO)) < 10)) THEN
			RAISE_APPLICATION_ERROR(-20500,
									'O telefone deverá possuir apenas dígitos. Sendo DDD (02 dígitos) e FAX (10 dígitos).');
		END IF;
	END IF;

EXCEPTION
	WHEN OTHERS THEN
		RAISE_APPLICATION_ERROR(-20500,
								SQLERRM);
END TBUID_END_ALUNO;
/
