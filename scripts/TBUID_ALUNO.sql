CREATE OR REPLACE TRIGGER DBSIAF.TBUID_ALUNO
	BEFORE INSERT OR UPDATE OR DELETE ON DBSIAF.ALUNO
	FOR EACH ROW
DECLARE

	NCODSTAALUNO           ALUNO.COD_STA_ALUNO%TYPE;
	NNIVELCURSO            NIVEL_CURSO.COD_NIV_CURSO%TYPE;
	N_COD_INSTITUICAO      DBSIAF.INSTITUICAO_ENSINO.COD_INSTITUICAO%TYPE;
	V_IND_GERAR_FINANCEIRO DBVESTIB.TIPO_CONCURSO.IND_GERAR_FINANCEIRO%TYPE;
	V_IDT_OPERACAO         CHAR(1);
	CDISCISOLADA           CHAR(1);
	N_COD_PAIS             DBSIAF.ESTADO.COD_PAIS%TYPE;
	N_CODCLI               DBTELEMAR.CLIENTES.CODCLI%TYPE;
	N_CODCAM               DBTELEMAR.CAMPANHA.CODCAM%TYPE;
	BGERAPESSOA            BOOLEAN;
	SDSCSTATUS             DBSIAF.STATUS_ALUNO.DSC_STA_ALUNO%TYPE;
	SDSCTPOSAIDA           DBSIAF.TIPO_SAIDA.DSC_TPO_SAIDA%TYPE;
	NDATENTRADA            DBSIAF.ALUNO.DAT_ENTRADA%TYPE;
	SSGLPERIODO_LETIVO     DBSIAF.PERIODO_LETIVO.SGL_PERIODO_LETIVO%TYPE;
	VMODULAR               NUMBER;

BEGIN
	-- Validação de data de colação
	IF INSERTING
	   OR UPDATING THEN
		IF DBSIAF.F_BUSCA_FUNCIONARIO(USER) <> 13391 THEN
			IF ((:OLD.COD_STA_ALUNO <> 7) AND (:NEW.COD_STA_ALUNO <> 7) AND (:NEW.IND_REG_FINANCEIRO = :OLD.IND_REG_FINANCEIRO)) THEN
				IF (((:OLD.COD_STA_ALUNO IN (3,
											 4,
											 5,
											 6,
											 9)) AND (:NEW.DAT_COLACAO IS NOT NULL)) OR ((:NEW.COD_STA_ALUNO IN (3,
																												  4,
																												  5,
																												  6,
																												  9)) AND (:NEW.DAT_COLACAO IS NOT NULL))) THEN
					RAISE_APPLICATION_ERROR(-20500,
											'Data de Colação de Grau não pode ser preenchida com status Atual/Informado. Aluno: ' || :NEW.COD_ALUNO);
				END IF;
			END IF;
		END IF;
	END IF;
	-- buscando nivel de curso e indicador de disciplina isolada
	IF INSERTING
	   OR UPDATING THEN
		:NEW.COD_USUARIO_LOG  := DBSIAF.F_BUSCA_FUNCIONARIO(USER);
		:NEW.DAT_OPERACAO_LOG := SYSDATE;
	
		SELECT NVC.COD_NIV_CURSO,
			   CUR.IND_DIS_ISOLADA
		  INTO NNIVELCURSO,
			   CDISCISOLADA
		  FROM CURSO       CUR,
			   NIVEL_CURSO NVC
		 WHERE CUR.COD_NIV_CURSO = NVC.COD_NIV_CURSO
			   AND CUR.COD_CURSO = :NEW.COD_CURSO;
	END IF;

	-- validação de status do aluno
	IF (INSERTING)
	   OR (UPDATING AND ((:NEW.COD_STA_ALUNO <> :OLD.COD_STA_ALUNO) OR (:NEW.COD_TPO_SAIDA <> :OLD.COD_TPO_SAIDA) OR (:NEW.DAT_SAIDA <> :OLD.DAT_SAIDA))) THEN
	
		--Valida remanejamento
		DBSIAF.PC_REMANEJAMENTO.SP_VALIDA_OPERACAO_PENDENTE(:NEW.COD_ALUNO);
		IF DBSIAF.PC_ALUNO.F_PERM_ALTERA_STATUS(:NEW.COD_ALUNO,
												:NEW.COD_STA_ALUNO) = 'N' THEN
			IF :NEW.COD_STA_ALUNO <> :OLD.COD_STA_ALUNO THEN
				SELECT DSC_STA_ALUNO
				  INTO SDSCSTATUS
				  FROM DBSIAF.STATUS_ALUNO
				 WHERE COD_STA_ALUNO = :NEW.COD_STA_ALUNO;
			
				RAISE_APPLICATION_ERROR(-20500,
										'Aluno não possui permissão para alterar seu STATUS para ' || SDSCSTATUS || '.');
			ELSIF :NEW.COD_TPO_SAIDA <> :OLD.COD_TPO_SAIDA THEN
				SELECT DSC_TPO_SAIDA
				  INTO SDSCTPOSAIDA
				  FROM DBSIAF.TIPO_SAIDA
				 WHERE COD_TPO_SAIDA = :NEW.COD_TPO_SAIDA;
			
				RAISE_APPLICATION_ERROR(-20500,
										'Aluno não possui permissão para alterar seu TIPO DE SAIDA para ' || SDSCTPOSAIDA || '.');
			ELSE
				RAISE_APPLICATION_ERROR(-20500,
										'Aluno não possui permissão para alterar sua DATA DE SAIDA.');
			END IF;
		END IF;
	END IF;

	--Tabela Temporária Para Inserção de requisição para Limpeza de Base
	-- =========================================================================
	-- LOG
	-- =========================================================================
	BGERAPESSOA := FALSE;
	IF INSERTING
	   OR UPDATING THEN
	
		-- VALIDANDO INFOMAÇOES DE ESTRANGEIRO
		BEGIN
			SELECT EST.COD_PAIS
			  INTO N_COD_PAIS
			  FROM DBSIAF.CIDADE CID,
				   DBSIAF.ESTADO EST
			 WHERE CID.COD_CIDADE = :NEW.COD_CIDADE
				   AND CID.COD_ESTADO = EST.COD_ESTADO;
		EXCEPTION
			WHEN OTHERS THEN
				N_COD_PAIS := 1;
		END;
	
		-- VALIDANDO PREENCHIMENTO DO CERTIFICADO MILITAR
		IF (INSERTING)
		   OR (UPDATING('COD_CIDADE'))
		   OR (UPDATING('NUM_CERT_MILITAR'))
		   OR (UPDATING('NOM_ORGEXP_CM'))
		   OR (UPDATING('DSC_SITUACAO_CM')) THEN
			IF (:NEW.NUM_CERT_MILITAR IS NOT NULL)
			   OR (:NEW.NOM_ORGEXP_CM IS NOT NULL)
			   OR (:NEW.DSC_SITUACAO_CM IS NOT NULL) THEN
				-- VERIFICANDO DOCUMENTOS DO CERTIFICADO MILITAR
				IF N_COD_PAIS = 1
				   AND :NEW.IND_SEXO = 'M' THEN
					IF (:NEW.NUM_CERT_MILITAR IS NULL)
					   OR (:NEW.NOM_ORGEXP_CM IS NULL)
					   OR (:NEW.DSC_SITUACAO_CM IS NULL) THEN
						RAISE_APPLICATION_ERROR(-20500,
												'Somente alunos do sexo feminino ou estrangeiros podem ter os dados de certificado militar não preenchidos.');
					END IF;
				END IF;
			
			END IF;
		END IF;
	
		-------------------------------------------------------
		-- Trava criada para não permitir inserir turma para --
		-- grades não modulares                              --
		--                                                   --
		-- Projeto Fênix                                     --
		-- Analista: João Vítor                              --
		-- Data: 28/05/2012                                  --
		-------------------------------------------------------  
		IF (INSERTING)
		   OR (UPDATING('COD_TURMA')) THEN
			--
			IF (:NEW.COD_TURMA IS NOT NULL) THEN
				---------------------------
				-- Busca o tipo de grade --
				---------------------------
				SELECT COUNT(1)
				  INTO VMODULAR
				  FROM DBSIAF.GRADE_CURRICULAR GRA
				 WHERE GRA.COD_GRD_CURRICULAR = :NEW.COD_GRD_CURRICULAR
					   AND GRA.COD_TPO_GRD_CURRICULAR = 2;
				--
				IF VMODULAR = 0 THEN
					RAISE_APPLICATION_ERROR(-20500,
											'Aluno não pode ser incluído em turma, pois sua grade não é modular!');
				END IF;
				--
			END IF;
			--
		END IF;
	
		-- VALIDADANDO PREENCHIMENTO DO TITULO DE ELEITOR
		IF (INSERTING)
		   OR (UPDATING('NUM_TIT_ELEITOR'))
		   OR (UPDATING('NUM_SECAO_TE'))
		   OR (UPDATING('NUM_ZONA_TE'))
		   OR (UPDATING('COD_CIDADE_TE')) THEN
			IF (:NEW.NUM_TIT_ELEITOR IS NOT NULL)
			   OR (:NEW.NUM_SECAO_TE IS NOT NULL)
			   OR (:NEW.NUM_ZONA_TE IS NOT NULL)
			   OR (:NEW.COD_CIDADE_TE IS NOT NULL) THEN
				-- VERIFICANDO DOCUMENTOS DO TITULO DE ELEITOR
				IF N_COD_PAIS = 1 THEN
					IF (:NEW.NUM_TIT_ELEITOR IS NULL)
					   OR (:NEW.NUM_SECAO_TE IS NULL)
					   OR (:NEW.NUM_ZONA_TE IS NULL)
					   OR (:NEW.COD_CIDADE_TE IS NULL) THEN
						RAISE_APPLICATION_ERROR(-20500,
												'Somente alunos estrangeiros podem ter os dados do título de eleitor não preenchidos.');
					END IF;
				END IF;
			END IF;
		END IF;
	
		-- VALIDANDO CPF
		:NEW.EML_ALUNO := LOWER(TRIM(:NEW.EML_ALUNO));
		:NEW.NUM_CPF   := LPAD(DBSIAF.F_SO_NUMERO(:NEW.NUM_CPF),
							   11,
							   0);
		IF INSERTING THEN
			IF :NEW.NUM_CPF IS NOT NULL THEN
				IF DBSIAF.F_VERIFICA_CPF(:NEW.NUM_CPF) <> 'SIM' THEN
					:NEW.COD_PESSOA := NULL;
					:NEW.NUM_CPF    := NULL;
				END IF;
			END IF;
		ELSE
			IF (UPDATING('NUM_CPF'))
			   AND (:NEW.NUM_CPF IS NOT NULL)
			   AND ((:NEW.NUM_CPF <> :OLD.NUM_CPF) OR ((:OLD.NUM_CPF IS NULL) AND (:NEW.NUM_CPF IS NOT NULL))) THEN
				IF DBSIAF.F_VERIFICA_CPF(:NEW.NUM_CPF) <> 'SIM' THEN
					RAISE_APPLICATION_ERROR(-20500,
											'Favor informar um cpf válido para o aluno.');
				END IF;
			ELSIF (UPDATING('NUM_CPF'))
				  AND (:NEW.NUM_CPF IS NULL) THEN
				:NEW.COD_PESSOA := NULL;
			END IF;
		END IF;
	
		-- DESUNIFICANDO ALUNO TEMPORARIO
		BGERAPESSOA := TRUE;
		IF (:NEW.COD_STA_ALUNO = 6) THEN
			IF :NEW.NUM_CPF IS NULL THEN
				BGERAPESSOA := FALSE;
			ELSE
				IF DBSIAF.PC_PESSOA.F_BUSCA_PESSOA_CPF(:NEW.NUM_CPF) = 0 THEN
					:NEW.COD_PESSOA := NULL;
					BGERAPESSOA     := FALSE;
				END IF;
			END IF;
		END IF;
	
	END IF;

	IF INSERTING THEN
	
		IF :NEW.COD_OCORRENCIA IS NULL THEN
			:NEW.COD_OCORRENCIA := 1;
		END IF;
		:NEW.SEN_ALUNO := TO_CHAR(:NEW.DAT_NASCIMENTO,
								  'ddmmyy');
	END IF;

	IF UPDATING THEN
		-- reiniciando contador da lista de alunos
		DBSIAF.PC_MUTATING_TABLE.VNUMLINHASALUNO := 0;
	END IF;

	-- ATIVANDO ALUNO CASO NÃO NECESSITE DE CADASTRO FINANCEIRO
	IF INSERTING THEN
		BEGIN
			-- VERIFICANDO SE CONCURSO GERA FINANCEIRO
			SELECT TCO.IND_GERAR_FINANCEIRO
			  INTO V_IND_GERAR_FINANCEIRO
			  FROM DBVESTIB.TIPO_CONCURSO TCO,
				   DBVESTIB.CONCURSO      CON
			 WHERE TCO.COD_TPO_CONCURSO = CON.COD_TPO_CONCURSO
				   AND CON.CODCONC = :NEW.CODCONC;
		EXCEPTION
			WHEN OTHERS THEN
				V_IND_GERAR_FINANCEIRO := 'S';
		END;
	
		IF :NEW.COD_STA_ALUNO <> 1
		   AND V_IND_GERAR_FINANCEIRO = 'N' THEN
			:NEW.COD_STA_ALUNO := 1;
		END IF;
	
	END IF;

	IF UPDATING
	   AND NOT UPDATING('cod_pessoa') THEN
	
		-- Fim Integracao
		IF NOT (DBSIAF.PC_REMANEJAMENTO.BPERMITEALTERARMATRICULA) THEN
		
			IF :NEW.NUM_MATRICULA != :OLD.NUM_MATRICULA THEN
				RAISE_APPLICATION_ERROR(-20501,
										'O numero da MATRICULA não pode ser alterado ...');
			END IF;
		
		END IF;
	
	END IF;

	-- Criptografia da senha
	IF UPDATING('SEN_ALUNO')
	   OR INSERTING THEN
		:NEW.SEN_ALUNO := DBSIAF.PC_SENHA.F_CALCULAR_HASH_MD5(UPPER(TRIM(:NEW.NUM_MATRICULA)),
															  UPPER(TRIM(:NEW.SEN_ALUNO)));
	END IF;

	IF ((INSERTING) OR (UPDATING('COD_STA_ALUNO') AND (:OLD.COD_STA_ALUNO = 6) AND (:NEW.COD_STA_ALUNO = 1)) OR (UPDATING('NOM_ALUNO') AND ((:NEW.NOM_ALUNO <> :OLD.NOM_ALUNO) OR ((:NEW.NOM_ALUNO IS NOT NULL) AND (:OLD.NOM_ALUNO IS NULL)))) OR (UPDATING('IND_SEXO') AND ((:NEW.IND_SEXO <> :OLD.IND_SEXO) OR ((:NEW.IND_SEXO IS NOT NULL) AND (:OLD.IND_SEXO IS NULL)))) OR (UPDATING('DAT_NASCIMENTO') AND ((:NEW.DAT_NASCIMENTO <> :OLD.DAT_NASCIMENTO) OR ((:NEW.DAT_NASCIMENTO IS NOT NULL) AND (:OLD.DAT_NASCIMENTO IS NULL)))) OR (UPDATING('COD_ESTADO_CIVIL') AND ((:NEW.COD_ESTADO_CIVIL <> :OLD.COD_ESTADO_CIVIL) OR ((:NEW.COD_ESTADO_CIVIL IS NOT NULL) AND (:OLD.COD_ESTADO_CIVIL IS NULL)))) OR (UPDATING('NUM_CPF') AND ((:NEW.NUM_CPF <> :OLD.NUM_CPF) OR ((:NEW.NUM_CPF IS NOT NULL) AND (:OLD.NUM_CPF IS NULL)))) OR (UPDATING('NUM_IDENTIDADE') AND ((:NEW.NUM_IDENTIDADE <> :OLD.NUM_IDENTIDADE) OR ((:NEW.NUM_IDENTIDADE IS NOT NULL) AND (:OLD.NUM_IDENTIDADE IS NULL)))) OR
	   (UPDATING('DAT_EMISSAO') AND ((:NEW.DAT_EMISSAO <> :OLD.DAT_EMISSAO) OR ((:NEW.DAT_EMISSAO IS NOT NULL) AND (:OLD.DAT_EMISSAO IS NULL)))) OR (UPDATING('NOM_ORGEXP_CI') AND ((:NEW.NOM_ORGEXP_CI <> :OLD.NOM_ORGEXP_CI) OR ((:NEW.NOM_ORGEXP_CI IS NOT NULL) AND (:OLD.NOM_ORGEXP_CI IS NULL)))) OR (UPDATING('NUM_CERT_MILITAR') AND ((:NEW.NUM_CERT_MILITAR <> :OLD.NUM_CERT_MILITAR) OR ((:NEW.NUM_CERT_MILITAR IS NOT NULL) AND (:OLD.NUM_CERT_MILITAR IS NULL)))) OR (UPDATING('NOM_ORGEXP_CM') AND ((:NEW.NOM_ORGEXP_CM <> :OLD.NOM_ORGEXP_CM) OR (:NEW.NOM_ORGEXP_CM IS NOT NULL) AND (:OLD.NOM_ORGEXP_CM IS NULL))) OR (UPDATING('DAT_EMISSAO_CM') AND ((:NEW.DAT_EMISSAO_CM <> :OLD.DAT_EMISSAO_CM) OR ((:NEW.DAT_EMISSAO_CM IS NOT NULL) AND (:OLD.DAT_EMISSAO_CM IS NULL)))) OR (UPDATING('DSC_SITUACAO_CM') AND ((:NEW.DSC_SITUACAO_CM <> :OLD.DSC_SITUACAO_CM) OR (:NEW.DSC_SITUACAO_CM IS NOT NULL) AND (:OLD.DSC_SITUACAO_CM IS NULL))) OR
	   (UPDATING('NUM_TIT_ELEITOR') AND ((:NEW.NUM_TIT_ELEITOR <> :OLD.NUM_TIT_ELEITOR) OR ((:NEW.NUM_TIT_ELEITOR IS NOT NULL) AND (:OLD.NUM_TIT_ELEITOR IS NULL)))) OR (UPDATING('NUM_SECAO_TE') AND ((:NEW.NUM_SECAO_TE <> :OLD.NUM_SECAO_TE) OR ((:NEW.NUM_SECAO_TE IS NOT NULL) AND (:OLD.NUM_SECAO_TE IS NULL)))) OR (UPDATING('NUM_ZONA_TE') AND ((:NEW.NUM_ZONA_TE <> :OLD.NUM_ZONA_TE) OR (:NEW.NUM_ZONA_TE IS NOT NULL) AND (:OLD.NUM_ZONA_TE IS NULL))) OR (UPDATING('COD_CIDADE_TE') AND ((:NEW.COD_CIDADE_TE <> :OLD.COD_CIDADE_TE) OR ((:NEW.COD_CIDADE_TE IS NOT NULL) AND (:OLD.COD_CIDADE_TE IS NULL)))) OR (UPDATING('COD_CIDADE') AND ((:NEW.COD_CIDADE <> :OLD.COD_CIDADE) OR ((:NEW.COD_CIDADE IS NOT NULL) AND (:OLD.COD_CIDADE IS NULL)))) OR (UPDATING('COD_PAIS_NC') AND ((:NEW.COD_PAIS_NC <> :OLD.COD_PAIS_NC) OR ((:NEW.COD_PAIS_NC IS NOT NULL) AND (:OLD.COD_PAIS_NC IS NULL)))) OR
	   (UPDATING('EML_ALUNO') AND ((:NEW.EML_ALUNO <> :OLD.EML_ALUNO) OR ((:NEW.EML_ALUNO IS NOT NULL) AND (:OLD.EML_ALUNO IS NULL)))) OR (UPDATING('TEL_CELULAR') AND ((:NEW.TEL_CELULAR <> :OLD.TEL_CELULAR) OR ((:NEW.TEL_CELULAR IS NOT NULL) AND (:OLD.TEL_CELULAR IS NULL)))))
	   AND (DBSIAF.PC_PESSOA.B_ATUALIZA_PESSOA)
	   AND (BGERAPESSOA) THEN
		-- armazenando aluno para atualização da pessoa
		DBSIAF.PC_MUTATING_TABLE.VNUMLINHASALUNO := DBSIAF.PC_MUTATING_TABLE.VNUMLINHASALUNO + 1;
		DBSIAF.PC_MUTATING_TABLE.VALUNO(DBSIAF.PC_MUTATING_TABLE.VNUMLINHASALUNO).COD_ALUNO := :NEW.COD_ALUNO;
		DBSIAF.PC_MUTATING_TABLE.VALUNO(DBSIAF.PC_MUTATING_TABLE.VNUMLINHASALUNO).COD_PESSOA := :NEW.COD_PESSOA;
		IF (:OLD.COD_STA_ALUNO = 6)
		   AND (:NEW.COD_STA_ALUNO = 1) THEN
			DBSIAF.PC_MUTATING_TABLE.VALUNO(DBSIAF.PC_MUTATING_TABLE.VNUMLINHASALUNO).COD_STA_ALUNO := 1;
		ELSE
			DBSIAF.PC_MUTATING_TABLE.VALUNO(DBSIAF.PC_MUTATING_TABLE.VNUMLINHASALUNO).COD_STA_ALUNO := NULL;
		END IF;
	END IF;

	-- ==================================
	-- Integração com telemar
	-- ==================================
	IF UPDATING
	   AND UPDATING('COD_STA_ALUNO')
	   AND :OLD.COD_STA_ALUNO = 6
	   AND :NEW.COD_STA_ALUNO = 1 THEN
	
		BEGIN
			SELECT INS.CODCLI,
				   PAR.CODCAMPANHA CODCAM
			  INTO N_CODCLI,
				   N_CODCAM
			  FROM DBVESTIB.INSCRICAO           INS,
				   DBVESTIB.PARAMETROS_CONCURSO PAR
			 WHERE INS.CODCONC = :NEW.CODCONC
				   AND INS.CODINSC = :NEW.CODCAN
				   AND INS.CODCLI IS NOT NULL
				   AND INS.CODCONC = PAR.CODCONC
				   AND NOT EXISTS (SELECT 1
					  FROM DBTELEMAR.CONTATO CON
					 WHERE CON.CODCLI = INS.CODCLI
						   AND CON.CODCAM = PAR.CODCAMPANHA
						   AND CON.CODRCO = 215); -- Matriculado no SIAF
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				N_CODCLI := NULL;
				N_CODCAM := NULL;
		END;
	
		IF (N_CODCLI IS NOT NULL)
		   AND (N_CODCAM IS NOT NULL) THEN
			DBVESTIB.PC_INSCRICAO.SP_ADICIONAR_RESULTADO(N_CODCLI,
														 N_CODCAM,
														 215,
														 'Matriculado dia ' || TO_CHAR(SYSDATE,
																					   'DD/MM/YYYY'),
														 DBTELEMAR.PC_RELACIONAMENTO.F_CIRCUITO(N_CODCLI,
																								N_CODCAM,
																								14));
		END IF;
	
	END IF;

	--  GERANDO LOG DE ACESSO
	IF INSERTING
	   OR UPDATING THEN
		IF INSERTING THEN
			:NEW.NOM_ALUNO := DBADM.F_PADRONIZA_NOME(:NEW.NOM_ALUNO);
		END IF;
		:NEW.NUM_MATRICULA := TRIM(:NEW.NUM_MATRICULA);
	END IF;

	-- TRATAMENTO PARA LIMPEZA DE BASE
	IF UPDATING('COD_STA_ALUNO')
	   AND :NEW.DAT_SAIDA IS NOT NULL
	   AND :NEW.COD_STA_ALUNO IN (2,
								  4,
								  7,
								  8)
	   AND :OLD.COD_STA_ALUNO <> :NEW.COD_STA_ALUNO THEN
	
		NCODSTAALUNO := :NEW.COD_STA_ALUNO;
	
		IF :NEW.COD_STA_ALUNO = 7 THEN
		
			SELECT COD_STA_ALUNO
			  INTO NCODSTAALUNO
			  FROM DBSIAF.TIPO_SAIDA
			 WHERE COD_TPO_SAIDA = :NEW.COD_TPO_SAIDA;
		
		END IF;
	
		IF NCODSTAALUNO IN (2,
							4,
							8) THEN
		
			SELECT CAM.COD_INSTITUICAO
			  INTO N_COD_INSTITUICAO
			
			  FROM CAMPUS CAM
			
			 WHERE CAM.COD_CAMPUS = :NEW.COD_CAMPUS;
		
			INSERT INTO DBSIAF.LIMPEZA_BASE
				(COD_LIMPEZA_BASE,
				 COD_INSTITUICAO,
				 COD_ALUNO,
				 COD_TPO_SAIDA,
				 COD_SOLICITACAO,
				 DAT_SAIDA,
				 COD_USUARIO,
				 DAT_CADASTRO,
				 DAT_LIMPEZA_BASE)
			
			VALUES
				(DBSIAF.LIMPEZA_BASE_S.NEXTVAL,
				 N_COD_INSTITUICAO,
				 :NEW.COD_ALUNO,
				 :NEW.COD_TPO_SAIDA,
				 NULL,
				 :NEW.DAT_SAIDA,
				 F_BUSCA_FUNCIONARIO(USER),
				 SYSDATE,
				 NULL);
		
		END IF;
	
	END IF;

	/*  IF (UPDATING('COD_STA_ALUNO') AND :NEW.COD_STA_ALUNO IN (5))
       OR (:NEW.COD_TPO_SAIDA IS NOT NULL AND UPDATING('COD_TPO_SAIDA')) THEN
      UPDATE DBSIAF.MOVIMENTO_TITULO
         SET COD_STA_MOVIMENTO = 3
       WHERE COD_STA_MOVIMENTO = 1
           AND COD_ALUNO = :NEW.COD_ALUNO
           AND NOT EXISTS (SELECT 1
            FROM DBSIAF.TMP_MOVIMENTO_ALUNO
           WHERE COD_ALUNO = :NEW.COD_ALUNO);
    END IF;*/

	-- VALIDACAO DO PERIODO LETIVO DE ENTRADA
	IF INSERTING
	   AND :NEW.COD_PERIODO_ENTRADA IS NULL THEN
		RAISE_APPLICATION_ERROR(-20500,
								'O periodo letivo de entrada é obrigatório na inserção do aluno.');
	END IF;

	IF NVL(DBSIAF.PC_MUTANTE_TABLE.F_RETORNA_ALFA('PERIODO_LETIVO_ENTRADA',
												  'IND_DATA_ENTRADA'),
		   'N') <> 'S' THEN
		IF UPDATING
		   AND :NEW.DAT_ENTRADA <> :OLD.DAT_ENTRADA THEN
			IF :NEW.COD_PERIODO_ENTRADA IS NOT NULL THEN
				SELECT TRUNC(PLE.DAT_INI_PERIODO),
					   PLE.SGL_PERIODO_LETIVO
				  INTO NDATENTRADA,
					   SSGLPERIODO_LETIVO
				  FROM DBSIAF.PERIODO_LETIVO PLE
				 WHERE PLE.COD_PERIODO_LETIVO = :NEW.COD_PERIODO_ENTRADA;
				IF NDATENTRADA <> TRUNC(:NEW.DAT_ENTRADA) THEN
					RAISE_APPLICATION_ERROR(-20500,
											'A data de entrada do aluno deve ser igual ao inicio do período letivo de entrada. Período: ' || SSGLPERIODO_LETIVO);
				END IF;
			ELSE
				BEGIN
					SELECT MIN(PLE.COD_PERIODO_LETIVO)
					  INTO :NEW.COD_PERIODO_ENTRADA
					  FROM DBSIAF.PERIODO_LETIVO      PLE,
						   DBSIAF.CURSO               CUR,
						   DBSIAF.DEPARTAMENTO_ENSINO DE
					 WHERE PLE.COD_NIV_CURSO = CUR.COD_NIV_CURSO
						   AND CUR.COD_CURSO = :NEW.COD_CURSO
						   AND CUR.COD_DEPARTAMENTO = DE.COD_DEPARTAMENTO
						   AND PLE.COD_INSTITUICAO = DE.COD_INSTITUICAO
						   AND TRUNC(PLE.DAT_INI_PERIODO) = TRUNC(:NEW.DAT_ENTRADA);
				EXCEPTION
					WHEN OTHERS THEN
						RAISE_APPLICATION_ERROR(-20500,
												'O periodo letivo de entrada do aluno não encontrado para a data informada.');
				END;
			END IF;
		END IF;
	END IF;

	IF (UPDATING('NOM_ALUNO') AND (:OLD.NOM_ALUNO <> :NEW.NOM_ALUNO)) THEN
		INSERT INTO DBSIAF.HIST_SEGURANCA
			(NOM_TABELA,
			 COD_PK_TABELA,
			 NOM_CAMPO_ALTERADO,
			 VAL_ANTERIOR,
			 VAL_ALTERADO,
			 COD_USUARIO,
			 DAT_ALTERACAO)
		VALUES
			('DBSIAF.ALUNO',
			 :OLD.COD_ALUNO,
			 'NOM_ALUNO',
			 :OLD.NOM_ALUNO,
			 :NEW.NOM_ALUNO,
			 F_BUSCA_FUNCIONARIO(USER),
			 SYSDATE);
	END IF;

	-- aluno 
	IF UPDATING THEN
	
		IF :NEW.COD_TURNO <> :OLD.COD_TURNO THEN
			RAISE_APPLICATION_ERROR(-20500,
									'Não é permitido alterar o turno do aluno manualmente.');
		END IF;
	
		IF :NEW.COD_CAMPUS <> :OLD.COD_CAMPUS THEN
			RAISE_APPLICATION_ERROR(-20500,
									'Não é permitido alterar o campus do aluno manualmente.');
		END IF;
	
		IF :NEW.COD_CURSO <> :OLD.COD_CURSO THEN
			RAISE_APPLICATION_ERROR(-20500,
									'Não é permitido alterar o curso do aluno manualmente.');
		END IF;
	
		-- CASO A OCORRENCIA DO ALUNO VENHA NULO O VALOR É PASSADO PARA PRIMEIRA OCORRENCIA
		IF :NEW.COD_OCORRENCIA IS NULL THEN
			:NEW.COD_OCORRENCIA := 1;
		END IF;
	
	END IF;

	-- Validações nos Telefones. Para não inserir caracteres e quantidade menor que 10.

	IF INSERTING
	   OR UPDATING THEN
		IF ((:NEW.TEL_CELULAR IS NOT NULL) AND (LENGTH(DBSIAF.F_SO_NUMERO(:NEW.TEL_CELULAR)) < 10)) THEN
			RAISE_APPLICATION_ERROR(-20500,
									:NEW.COD_ALUNO || ' ' || 'O telefone deverá possuir apenas dígitos. Sendo DDD (02 dígitos) e Celular (10 dígitos).');
		END IF;
	END IF;

EXCEPTION
	WHEN OTHERS THEN
		RAISE_APPLICATION_ERROR(-20500,
								SQLERRM);
END TBUID_ALUNO;
/
